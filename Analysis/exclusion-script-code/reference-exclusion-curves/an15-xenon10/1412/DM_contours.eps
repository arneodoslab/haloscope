%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.994 Copyright 2014 Radical Eye Software
%%Title: DM_contours.dvi
%%CreationDate: Wed Jul 22 11:01:08 2015
%%BoundingBox:  65 400 355 670
%%DocumentFonts: CMR10 CMMI10 CMMI8 CMR8 CMSY8
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o DM_contours.eps DM_contours.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2015.07.22:1101
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/05/15
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  0 0 moveto 1 0 rmoveto  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.06, 2014/05/19
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSY8
%!PS-AdobeFont-1.0: CMSY8 003.002
%%Title: CMSY8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY8 known{/CMSY8 findfont dup/UniqueID known{dup
/UniqueID get 5096649 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY8 def
/FontBBox {-30 -955 1185 779 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY8.) readonly def
/FullName (CMSY8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D80B73E7B6CB7548
0E1D77FFC695988391DC44AEED8CC947B3D7E198B9620E2238DB3A2819182F03
14498B8CDFBA48926DA721920B221FB33BC21A8456AF10891403501D0F6415F0
7E041AFFE109F640E54FC1A365674711EFF94E752652A4C8DA62CDB1149DB899
2C4A4BD77A06E81E93C5698C05DD02F74A0756082738BDB53003B483752AE498
DD718AEA8F3FB5A6B7E2D2AE8F309065F3D556F9A34AB90C88833A54295E0982
209C466A301BA3372AABEE20D862C6DC6B6FAC1463C8CBA8AD766ED1B4C9D712
2BECB4E6ABF558D8AB5281C35726BB8D046982C0DDAE17BFFC9394125E4E84C0
B283977D31460B8EED4346CCB09F64DA0ACB640C6DBF32F2DC30D54668C1CC12
24C7280593088E9958C047125C323E9C842801346A9CE5F50413D69F6DE99471
65D2E387765E92EA4C43F17B467DF6E266D92551009C0E52E7219AE9F5E2E8D2
88852086FF3600BFB50AF3EAF8C009D8D5F084B510F792385F328F7EFA8C38AD
CDAB2EEDFBC6AA45F6DD7364C2F02DD2BE6C79C8361E83D4267CEC2407689864
B57B5D967FC80AB3BE8CA43955FB0FD3081D438437559AD24A7ADD484C1E4A77
B00BDCB0D1B121FEE983412E1EA5489BDCE5DCB4A7310135956B230C0DE7BBED
516369A92BC41FAC8D73490984942D930DC193BF0C774C1AEF627B969EE4B001
11381AC57815D7581E2372A1DB740B09F4A7FB4318B765DA4E7B44E8805CEF85
44EC3B10613FE7B397BF91B69A5CB2E9086D1E7A1FAE0A9ABF2A237A2D29ABFF
E392A18AEACBF28274E775D3FBAED4F46B982B9DA4602E24094EDCCBC9D6FC0F
67C60376879245606C0B9C9A678E8917516BE1CF097B1C75C9F0DDAD6899F08F
81FB7A198D45FE060CD2A550D9B8D58B882B969D7BC3EC018A1FE92BDB262835
26516FF97AC387EA525FF987E5EB1EAAE4EA5866C9CC043D183763C530F7D7A1
2070E4044507C4E5611FCC117FBE4396E0B24F672CD53D5FDFA56D561FB86D40
90A52A7C7F29A119DFFB694A8C445367746A49CA5FA83163BE448EB19625DF26
609A8C8672631A10411036CAA3D6C2F822A4B2505DCBE8E1CE6916AE515E78CE
E8C894B134BF811671D17C19248853131DFFAEDB24B15FF17EAC194662460642
48D23515AD434C68DF56753806FE96DB3A29F9D4980E0B6EAED7383F9FAD2584
8F85679D6D1933677ADF5D31FE6E43DABF137E834A1DEA632D36EA5728625159
8F33348893C9D1C510501628E4A9A80587DF6E179FAF68B158406A3EBCD726E2
AC17F2DF8B3607072824D2E5A6479F7BADE32E603E54E7A83BB2DFDEDB0D80CD
1F1BDD4F6C9025CC3A8A3685DF10A8183FA80CE0F0FE2BFF2500F76B1037AE41
56D2D7FB468C3CA7549E3599A2AACF66302572F1B35BC8EF7C23F6FC4B720228
1D673D903111CE378AAE83480B4DEB7EA84BB35F4F7BE997DD4FFF5A9B5E7650
3C7365BA0965B242DC369D03215651184024A08EC284F1798B0726152884B4D8
46411B3BC8F5CB53A70AD53BD7B1AF23528849B56CF2F75609FE715878CF6448
38579380688B47AE3D374B0DB6ECA5B8284414090123D47F3F9DF389E023F431
6B4C0DDEE4190DEEF4CA772742012754DA9A44A8F550FADA6D8FB0C512D5BA2C
BB7DF71B1DA41FB6936BA71B710CC6A80751E43436F0F5888F51AB370DD4A088
40F402661E08732C960705C7E0D29B8DA1A8A3E119409E51EE575E9655F47568
023977917C8EC610BEBDB9C1F4EBC192084D63EAA00EC87B53E86620BB5AE51A
579B0F8E1972CE1DA02832FC75184F45409DD9D413402C2FA27BCB0AE6DB4CE1
5AFB114E23232DE07C4674969A1FC94D152C6D3A611F029ACF4D949A2C0755D0
31C7DACDBB4DFCFAF7E87295CCF5D4AE28D87ABC3533D87EEF1507B9FF9063F7
F007DF03734A20BC3A198B049000C92D2849C62DDAA719FC28EB372793E20128
D786670E08948808BA45C4F6AA0DD8A8357CCC47228A760C5C7864853BD9C9A4
285E446CB72C5C9D3F03FAB000810DC5674061FA116153040743E846506CFA67
FA8770E785D7DBC7293F37389A0859CC22275B23C44B57B92A033A7BD194340A
D6BAC6E103402F8396A5394C617CB2A27D9500921D5DA06115EC81715EA8E360
4A95DCE8689CBE268B8E6C8B806CFB0ECBF634250243C9E1AFFACAD65311FA4C
1DB0988203537E5EF12B86FB454D06CF05E4F4FC4143D62920E99304245B6ABC
82E21192BE94F5E980DB21E07FEDF0EB0CAF4ABDFC20EF08A2A44A7940E2862E
08FABA516152DBA899D6CA561EB08C7C8298DD511084E5230CEBF28AB1D84C85
B5BAF4616C28FE05AFA4BABB3BA03F8CEEF3F3EB0D3034BD3D8D06629B8E9EBD
72484057E71C9EB4DFC7C2CE7749271AC926C2419D618FB0B60FD6F81F0F2C04
E529CC74DCC9E4AF32D935D7CA65FBD0842A7BAF162D08F782E65DF3AD9EFE69
198AFA9208B22BC21BC4ECABB9BFFBA84C8421B74748E1EAAACEB59E566838F2
C439579D6C75074F94493F7D5C8942D881AAE6302C37A61003AF77684EE99AD7
EB5EEEF050C52E75E4E842F8174470FA60CB213BB6F257EEB26CC55D1202931B
B981DE2535A87CF37BFF912220C117EE166CCAE58BBF624170FFBC0716726B36
304D698F2CA131675F7B1199E6581B8C812C4FAF75814282477BE2B7EBCBA7C2
FA6356B2876F89698C6C2493989E9EB252DE03BB374622A7C88B8EE9FEB4851E
02F85CF70CDCA7BED5EC94E81170FB557C3BFC6F32CD70B506E56A2CC5451592
130C6F570C679577C44D60A811DCEFB3535D855259B1021AC168DB76DD38B459
F1813E3DB20AD9275D58880CE94058490ABBBB0D8DD16D4A65F680B30057F15D
07FF54D779CC978E90A850A2D8D79961EE276BB26B594C16F56557435671A3D8
ADD3DD0BC4BC73B0652B9DA8462FE614A14A11ADB2214EC4910823FB4CEC8938
24354C5C62547EE5710FB5ECD93AA45DEA7411F6CA8D5B5FA222685E622AD73C
1BD5DFD1C8F253352D6C7D14FF2FACF07CA5EB11392C6A33E9CABFD99F743BED
55E8DEF49E07B9444171D1780C698E5B65B540F41F845AC188DC7C0C8B5BA5F3
546BEAAA4F29F0DF30D5AC12A60862742623100074457BF2D820DCAAB340C1DF
22FF26992DC02F276B40A7C528C84B72CD189A4088C90070486C49A1014FDDA3
5093FC12DAF309FBC063653E6A33E14EB51B081126AB5BCB8016E975060B796D
6CBFDFE6CB9E191F12E309254BDD6660E3227012F5DADE246B02B6D8127F1EE2
248F48DC5ABBD229748444420C868450602120664984FE3A8B2373232CE5CA15
E67172CAF7EA99F73A66AE33B1EDE5E8351DB02497CE3338930147873D4E46B5
E918F5592A21789FA9F46232BE693DFC33240E2649D6AC1940B101D806089436
F0CE230BF6D0363510378822891DBD3EEF3365430E74FB6C994BB40C8EEDA593
CEDAFEBC3B87C7C04F52FBD7D557A77B44855CDBEC8A8D26F44D66446B5662AD
15B6B79D13BD262D79BF51C09F8F690A61C7F11EC2E05F6BEDA273648E9E1EBC
3D5F1D6ED486797F753064ADDA8494405556D43D395B1487EDE877CCC1EAE954
1AEE2513DDA94897B733609E8179DFE1975590568202EF20D58A89B34874CC3A
A5579473AC65E0EE61545AEF578ADE10BE3FB3E2CDC96678F613E4DEF7BC1B38
8A551C93438A0540E292F65F1FA73D9AB30A5F545284085E4930A570C1807995
7108AA8194607304488616DD4AB189F8EDC5F4507AEFD7847817A8ECFFDD2DD5
DE95E04EAF2774F8AF661827229F01E769A32734097C457EB6FF056D90C46C5E
9F936AA6BF2EE8244BBEDB8862E56423F5845BB10C8809730B011D650EA18945
83C320A3F4ED095A5EF91929FC877ECC28A1C2CE74A53245E629BF46C6534983
307B1C94EB35CECDEE86551F0C308F66690E591C5D9D8FE14F534CF3F5DB6D32
39D7C799F392C4E65759B7BF61F4D8312E3B26C31466206A367A0DD7A90D25E2
805D36ED5CE0A4BEBCAC0A348FADD2D2AAD670E28BE6E33F627B4A9F35078B1D
6688084C4C18840673EF9B3526172EE14EF64E97C8B006C27DF6EF73BA6E6459
3608F10EB1EC4B824DD5360B42AFF2084788B165747AABFB2C9C0EBBA9C6246C
08F28143809315D6268E386F09BBAC54C34213438B56C386B34AA457D149CC39
A3C163F56E3C2E637C63A79CF7F2DE969EF3AAFF75F3F20499A9ACA61279D545
866FFE57D25998244F448AAB042B141952BD653007A889B1A716A4042CBBB827
C1ED5E3C616C22D5FCB39D3B3539F9B71D50D25ECD2E5D953C7A5194C867DDB1
75CE10B2C3A20E8CDE15AAE9F549D034838DC066CA649C31EE365D46450AF18B
893748D055DD88C72391FD92DDF0AA1A1316051BC756F87BC9A425019B2FA7BD
CA9F35E89E2229B3021DD24C9DF0DC3217F44DCF510116DDC9E92EFDA3E0A892
491C8961CA484BA29B8CACD2FED2E246FA7414F892AF7B9F08698FDEC82D2E4D
8C6ED1FD9E0BA2645663E7E97B0F780033D025F2EF3B364574C03F04FFC4E09A
3D4182BBFCCCD8CA54A92434E2208803ED36F931D31C7498B7FCEE4B78AECF11
B27123A10F031F9CBA36066680E4748E346D18FD0EFA395D1A9227530618ADD9
64D96C50A0172F712CB427E8F7170F8A1691FB95B247A271499F0E63676BD64B
167438333A3BD9CD9641AC637E0ADB17F1E394DF34AF5A2BD02030DD087BBA02
E1209338B74075744A9A9966039AB6D223F385E06FF359257913E6C01BF32F5B
A3640C7CA41A6C51F296E50DC1CD1D68491CE5D75E0ABDD4C5C4A97C8BE2BA35
D91AF9F8F38E7AB8C1778B06A212D0416E6137087329AAA2679C51D014CC4DEF
0F1543E2FD97621E552E19B29AA1368CB5046C188BA59B1E1875B25FB269DD2D
C0678A42CD310702465694F2BF302AEBC43F714F7C657505132DDA71CD23D17D
628BF3400EB5DDFCE2850F31B40C5913394649AA4241CF646F3939916C2077AD
C11F8C3E478586AA7931E327333FCD8A2EB31DF4B47AA2F31B999556602DD998
5848143C0CBD0B5187DF08E675550F2384D48C2954EA7D16AD2B94DF97C194D2
302CC47BF968CB1F6C9641A87525D5C6972ACCA1D4A4B4DA8EC54BEA6E7312B3
2737754A9FCBED3BA5F8220B751506BB0A5BB5CF706AFCC04BFD713A3BE3C842
9FFDBAA0CA5691D0FCE76134841A169970903843163DE68FF09649E99945DB64
491FD6D8B2DF237DBAF550D1B74263B3BF1EF6211F40D4DF2DEC46E4DE557088
5D458A7CDC6F34B8C3F5C76582C8B7D24A333AAE0B43CA67436F8ECAD7C50B12
35BAAD521033D8024E4DFCF01580AEC63BD5F8ADB778F822AC4FF0DA608EB7CC
1A52A51B9F38FFADC0D2F4D8394C5D598123B483AE5AC1215F24F2492EBAA134
3C58AD4E3B493AABDF753EBF1F04058C6981C353D6788C2D3294165B667D3765
7883A8493F5D772F789F73979B254BB9397FDE4F8B76CA6FFF312F4B012949F4
3EDCF1AC60FFF2681549DFF430B498405E79CB407DADFCEDCAB1E2FAD3B0F4C7
B575A33EAFF9F67D37F50BB06D06834EA683862991C5BE340D4A7F8D131E733D
289F72977870F9958102F5D835739F0F5A642E7194E8AF7FDA2937E5C0712CE4
EE15CB475725030CE0F238C32775D3EC95CE3D0886046E3EEAE322F59D423E83
DE88DDAB5CE0F70537487EBA5A16A9306BA7DDCA14A85A9F83B3BC3600DC9421
BDADA2704A5A24F7174A3A486ACE68739EC5960038CB44D969A594E97AE1F42C
42C1B7E3A456B3CDFC7683537B337AA8777F18CA45B22C8BEB18877DC624496B
9E8EF9F386B7FE4D94ABD5CE3B5786E76FE04A35909C472C04654A4405932EE6
A4A3E0F6DB088603FDD82F0EFCB85A962002A662D1AD0647A2F484B59075A1FA
9F4327D542ED7962620B998ECC3A95CE736089593461CED9B5AAAB05C2DA3820
5AF29B32904E1EEC357C8E282189C6D8F562DB11291091E6897E24CD8F8E2A34
67F35D261E01336152E69831B0CC6B03FF1AC7EA22B745F513A25FE10F70E74A
3FD71FE1EC9999BEDE7CFA6A97EA2DF621711BE950FF8960965685BAAEA71FA6
36F165573A0A6A92DAEE41A9B0C97BF03419FF6BA1F44524D00FD671EACC4233
9A857680DFD27B9F1E7A760058C8277B3761DB9969241D1824A7DADF70BBFC38
89C6DB9091E3BFCB36851CB9662B365A4B7384BDBA1D385902D1E5DABA72A159
63790096B927EA49299AE03E41C7F593F3B995D1155E91C62D5F68845ED3C797
7798B56858F96C2FE2E37D812873B7801767082A6D6B60602CEB94B7F6D7A142
72814734DC584A18D1FFEA7333D4C7E2DFE5B91E9AD92EB52533CA52FA888980
C79FEEDF0FAFB3B20B497F9AB668BDAFA364B405916526D5C48E57DC30BC35B9
BF684FDFAD199D9A28541327F3899AD505FBBBBB22F419E22E0149EE5FDD2B43
AF442E2724EC16934C307FA731F90AD1C76B74569B78CDEA7C19808233C6364B
D049F3F50A68D3EC5F29F2B96BC58C44AF90FE13F244B7129F14B5DAC3F3F310
B330E67CA4EB76F895DAC8025F11EC7630EEB4826B5721348FA38F28B2AEEB1C
5F7CA413C486C94B1DD96988F07F7A08D3635E28624878E55D4FFBEB5E183CB5
93014D8A272EBCF3A09133603CFFEF43A6FF059BCE525706D3795884FB495748
C8AFB50DB464459A5C36D7CD087631BC09C693A11BDF1C6011D9864FE66EE8C0
4824A42E97D16E017C0BB73732D4537E2A5BB283B3568950E5681364DBC1D6DA
058A122862A44ED85029A7B39F2FA7C362D859D0B429E056891339626AE6091D
74F6110CA32F8F3E9507216997E6AD1A2F1FFBE8B407C9880DE230E234F6FD41
A291851178BEAE5DB9DEB22E3443807E2BCEF12A4AE8C490AA9E3D2918329F47
42314CD258A0760DE5FDAC4AF7209CEB530B8508B278952A3638CA8491C3B493
516F461610DBAF32E923ACB834B15E2D169A10F2609EC0ACDF7BDBC777DD2C19
2DB330FD557D3B06B78824D6AB237D8F2D57A7ED35F02CFA9290ED6893B41657
A2485524A3F1642FF5808FDB77015D9467EDAC4A6BBE8A175833B1225A5554F7
2C60207F7A2632A4023255E8EF1F38C1B8216C9B03319B60BEC9799E5378683F
46E698FA75F2DFD40F17C603F3335F1EC70DBA1449C7A33EDDD46CC3DE4A6557
EE67BF349AA8680FDBF415DC527129288B5879500180F75DF80394EC7CF11BC8
9EE9A4ABD64DE3076A2963F83FA333F19FF74F79ECF36A87A31D6F125FD2415B
3F6A6FC33C179F54CA164835F3C3DB62AF444BDF27AFF23098C7212477F688B8
6F48D9AD080D544D57FEDD33D3D9AED9346CBB644C97C951D4AEEB2BF6F0CB18
E2517BA7ADCFD00FE44E290E731D53E5C0D762FCBA08004562DCE6A5EF2FBB74
B3053CBED3B6E896B1C3356DD9E8FCB69691AAF6BEBA0424D62B9F266D560B40
89E20A9F35AD4A7F65A7183761ABBEE0F7EF26ED3565A25516A3A5A57143979A
1EEED8CD52A69E4E1AE4795F3EE0CA21B9F4D166783A9AF54B08B6C56703932A
310197E328C6E6A6BADAA11D66A952964F31FD690082FA02D1E2A4512A9F2742
33B203FB770A3A1C7490ED630D0FAEB3066429D0237E18818EC368D0DA72EB08
1951C70139EB0DD59EB53AF5039A7618C77F6CED9F0A066FED6FEE0C0E328351
BA39746C1224A29D191D8B86491E0A306ABA070CAA2756C3A33990EB6DDF34E8
06EAAFF94AE6686EEB06A17D6D020D1F4E59428D533DB0EDA6434E6E1A478D5C
2A0D08CB39DA7D5F5200199FFFE3F41729478D4F63AE01FC0BF3B378FF6402D1
CCF1BE5F191BAEAEC7FE400C9980E103D8776EC196E741AFE11D249E0C277263
80FBD329524C55943E25631F113FBD8331C0044A7A2138637206A7941CF02590
577043EB0F205392C34E18B1ADA47CE63CB8F01365A044CE570FA20446102210
F03C0647CD0CC29E28B149F84C2F39256EE1457CDC3862C4082A95B44A61E8E1
B4ABAD32DA3E2FB8D849B1C5CEE60F205007464DF38712737776BB6BB3223941
95169B5BE578BA13DAE40B19AC184CB6F260A1EFE13CC8438ECB56EEBD30ACDD
8E24F52934
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1DA7F2F631C34FD0E7EE6B3735317429D111049B6639DA160DDA2555235
3E6ED578ECFA6389BB0B585FCA9CC4C7F42B47686D65D04513C2B16E59080C9D
E13A7159DAA0C794959B8C85BB556F6E6C38D7BEB652FC09E7BA5B02E9DA17AD
5FC6F6D8BC377B5230721CA8D0530E30033B8FD7FABEB6B8E5C1B76C85EC7170
64CD9D6404562237BA9546DC2E501FD7E99D5BB7ECE52105C0F4DFC5FAB429FD
9CE11F78B19A967034933E40705B5F6DADEB6A20ACE2A5228456151AA19F0B71
13FD5061C2BC81F3C17E4212327092C718CD06F6EF731A9E1441884DC934D001
3F254D7162B7E6668CC3D8150760453FB8315C50116DB1311B2DEA78695527A8
BAA53FCFA6614EF2670AF910EFF7430FABDFB74A36D5DC3A2B2EDAD41CA3B80D
F40B0F542457CDCB3DECB360868C9C2999CB48B453F87BFF1FE9294689308D56
3DCA8C91380EC4EACCA0FB3F03348873E714039DABF128FE25117326BEA76FAE
AED726CCB2A29804911B15F9022DDE46649113F47BABCE1282C8476EF29C377C
67FF8C64EE00B705C75A8A54E1FDF6D1FC46A393241CE914B607F68D1F286059
0DB1053D7E731D2C2FA15A0413C4C91DE878EF7707D955CF0354371AF1D0D986
3BF9720F2987E5F2B173EE84080A18722EACF13022C8B766EB71A62EE47E4FE7
FDBF631B4C790D1C83573631A0507B3790CE4B7083954C4DEDAA36E34188B1B9
29C62378EAA5DC0B4586C3992FC59D0DD536C37D967857A731C4BF124510F064
1E54933DDDA76D44D1C4ED1BDBD31D1EA556E0F7B2644750870933A7FED92622
4A907C3005E8DEFEC4087F521F1ABA4FA5505B04C9E5903D7468FED5298440A8
14821435ABEA05C3600CD1FCAE1457F2DB7E35AE8845343E9F940914D8CF8878
34EF3140DD0B45B1C0E9C918BDB039E3F934319FB46B439F48EBD4D3A8551095
1883B78DA7080842F969BC6C159F56F2ECB89290AACA027AAFF04474AA552AD7
A859557206DCAAA1691BEF73A1B982ED71CE78180BDDA15DF4AB278E8FDD6078
33B48F2ADF13CFE558A3FF319B40D4A51FAC76B1068E6ED69326AAFC99FF524C
66B6082B5993843354848D89514A9F6241B69B3A23D218C14EC42406AA210C92
628D818FA775B68C317F655C33DA81D4A06F339258C79F4E56387DF612B75F7A
F2C67F87BA3D0CFB3BF293648F9C4F5EA7897413EFB32CE30F7DD8BDDB604E6B
8B2292DB6088C0111E5591FA1D91D04CD20CDA1C9FA2FE4F84BD8747D44EE338
340868B69B3D530774E8B16B2B7ACA00984FD65CE15A086C69C051DC1360515A
EC3ADFCF0B9174808940CB5D62801CF50C0C4AC4B3DF7C050E62D29DA3447440
1468FEB32480DB6B9D19714FD7E49E0C897759CCC251A89CFAF38AABBD13F774
F37EB7A91C190BE5E8B0EA0AEF73682C8ECFD1CB469F1B14F299C3AEC2C2C6B2
0A375349E6BEBC2590D1E89031D9FEE6DD44EB2CC6356F4D4BD1CB785477FB77
42B60888767B5B33A97D2AC583E6BEAAA3FB6FCA7B5170B0B45A710450983F79
015FCF94D443692AB08018DA8F22C6CC9584D82B5E95417C4D8107965069C237
9BA08FC80CBDD4F1D8799D111DA0A882C69078B48574AD10276B06F936AF258F
5791036B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 40 /parenleft put
dup 41 /parenright put
dup 48 /zero put
dup 49 /one put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 71 /G put
dup 72 /H put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 86 /V put
dup 88 /X put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 109 /m put
dup 110 /n put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA7120F8F3A8E42134F1B6B0C248D56F247AA68FB941839F600F61C
14247EFF780BBA3E5198D37CED44DEEC3455048FC451BCDB48DC414AE5293A60
5A59877D6DFD21EAD729CDB7B378CEDD34262B37A194EDD0BDB24AA42649375B
491DC08F6B03DFEB517B2FC125DA9373AFAA94F4E4BC09510A73E079F4ABDD8F
93529E898B13ABCDE7322323B3A2A02A0BF388E89B4F529A66FA22D38E3EE342
54475A1989BFB7A119CF95750D5A18BB4FA9CDA30DB6F1AEF8AE8448BBC999C9
FD0D74DE9A17A3153617F07CACE92977B68FB5A1CFB29FD42494D5D2B9C1ED81
2F3CCEEC1BC079E837DDBB57C7E351F9925FB96349F8D9786D8E6FF03E9C4C1E
67DB235577B68003BA14073E2702296B284F803259283005D97035874D2B9AFD
4D3F29B4B1E6EDE30DDB9C68348CC174A091791FA74520C8614D4FB1125CBD6F
B9367559D715ED057FDF6DAAC180C7FA5CCEFD0C5878A91B20D4919792C03CA9
3AFC986C34C08358A3E85F241E3F8F815FCE7C8E07C2A4258E17D65823264049
3803D47C96A2745580EDC957AC4291730A840A2BADA50A28342A2B7093A3F731
4F4F656E974389E133C53F89D5DD6407BB98B211697941A927BC72A0956FA78E
2DC624B2C253F76778698BD1510D509244AB0462BA8E80769A51F6D020E146C1
7EB6D7207653B80610F8896EBFA6A606EFA54791E78139918C010A404BAD4B0F
F3779D39D31D665C528290D1D4096CF7E65F18936508848DF4DBF77A197944E1
DE53CF98DD5008E84A4BEE48C971DB9586980FF90D4AA43C5277C1676D4A6896
BF3168664C7F31059AEF729BB5BF404B88965F7094345DA4F8535C60FC1FC946
4285EAAF493594567AFB161839189B3E4F336841E84E25B1433AFB7B54EF3CEC
B9E45B8498ED837F8AEED26D9949014AAAC4768658812C4EBFD009662F61255B
4CC7E80BECB389C538E063F6E5148118D104136DF446974C653FD674D12B7741
4032B6391A56012DCF662892D77DDB1309B66F009808B3E847A873C89176E748
078A89935CE5862F2DB69C1C1CE08088266656229172136D45F041982FC31E26
21FA7F1653294431598E605A1FE9C94C69D74C027E2CA2F3198B193401DA7A3D
7D3FC62FBCE3FFE3DB1A55B19933ED1A46BF2FB2CDE9581D5E83747F36CAA645
4D76A471A403B042E5247067F0D73A35F80255CC45D5239CCDBB41A81A21F8A1
EBF082DD190BC9F474F46C7238DB0A6968C4CDFB81B4A2884EA693E027306C5F
F41162443F70DD4C7BC4D54F94FAF28247662F3C670A75D4877A155FB2A341ED
546BB25A11C28B5846B247465231691ABB7E5424BFF39434E3F7580B36099A5F
4F1D22D2D90CB76C39EA6587B515F5CAD0858001D0F08DA33F14F20DA3AF073C
9DED0369646F6B36693E9A3C0BE49374D995F4154FDB773A7D9E29FE46E464E6
02CD20606674AD664E06B119CA0AA3E4436BAC9AD073743CE902101104227924
60F3FB11F5A0D9989BEDC9427670B86CF8C5C5D1F58D60E59233901084B394E3
583C205FC71D050CC044204482CA1EEBAA5C23F4F3E030E5CBE52FAFE31266C2
4015C90805989E55D86D375CB22043F91514A58EFD8566893F56B21C5F06F4CE
3CB7D22D504C13E33895596A25551352787B725A6C61EA0FEFA39400ED348D40
DD39B828BB81B3FF4B7F4A0070624063F03BE75BE602018C5DABAB083E80D2A0
E26F4DD4CB3EC67FF81E7E60FEF13E55FBB76D129DA85141949A55A5F6AFFB65
C71BB7DED04D1BF3119E4C611546F4470F8DC9A1EC545EC3FDF3A3C6FD41586F
01FFB7DF894A0055098F2288CD0A5967BEF2EC6FF486D5BB96A48ACC716F622A
9652257AC710CA061492ADB51EC95DF8103955976E718D6E34617C1C43887B28
56B724D1EDF202A59E362AD022FB8EE7970A0F919B8A4E33ED8CE8ECBAB57835
8CDF49F0F1F3A8F4323352F03323228B622E3015DA93FDE7EB709BB571CBD6D5
9CCDF107413FB6390F43F67C70C69D12B77A5E56B1C92DC2E7635BE37E23FB87
3E2488086BA272753E307CC057CF1218629AF962EC95FBA423CCCD94DAE6EDE9
96937BD08860970A39F150893C468EAAFDC53EDC76142AF3E3E5200BEF6D4F77
3C4911728B598303CE6CF5C888DF5CD52C65C27E8601228E452E996A39169641
7804BD23317E5344518A18EFED89C4275FA41A842B3CFC3CD9CD8BE6B550F18B
30D052860053B91C4C8BDA11342DD3A2B352DF1B689F2FAFB343C618E5D06021
0671EC79983BC2AD8C33946299D0625683408D3AFC338201BC2F5F4C7AAD461F
3FF2EFF20DFEC6942E2E9BF90FEC9BD374804808C980CFC1AD9B5CF9DA1F1E6E
BE97893A714E15A869A760D44D5B355836833BD1FA7CEF38768B7F6B8C3381BF
4903A735B7746BB6812FE530DC926ACD273FE63A16FE984DD5FFF5F83DD310DC
7029D90877BB4BF16337454E773DCCE965FFDE0940A6F5FAC11FE47C201A652E
04396F40CF867E425D1BB748115B5086FD8CBD9212AC5931D8ED5236F2E96D3F
05CA0DFF5AB131EEF1C494312FCF2856217A2FD939CDF2E57B26A5D0246214EE
EF07EF532EACB157DAAC2763C8155594D28CE4F237F94801F25857BD7887CB41
2AF6AF383B428FC35C43DE0D5A4F8E86468D1E197716E61E7BB9C4F138FD4DDA
0AED726D425A1F61CB5568F00CC22CC3338B8D2E8CBFB5E858FC7C1C1A822194
18B1FAEF1486152B363EF085E3A7A77BA7801C1FBB7875AEF61AE79D433DD2EE
51FD28A75E6BB9174A25215071C01285A36DC6D2A3F568CDF3022F452D00E6C3
F486108289E9F1B5E29E57540F9E4D222126B2F695F1A712955BE930BBC8B6F7
FA4D2E14113A876B631294EBD920D37AB25596A7EE2C974A27586B11CE252E6A
B2D2B1794A968EC184BAE26A081A2C5AA4B1C144D9B08E77F8D7FFE88EE2EAF2
D6C68A7F1709D0C336E043132440D257110AB63FFE113F356E030FFD1FEAB17D
97CD03FB8CB1FA267164742287C9F05BAB96F903513BAEC3D0709579EBAE534F
CAD68EF2CFF05B0660D81F2BA3A42EC1FDF11EC8385B3F737BA6157B5E132BB1
57EC305286CE4F0681B2FE319DBE692FC1E76A49A294F94CBB55FCA7617F2744
370D43F5E2B9EE536ADF08737F41AD8DE10D42B7A8910606700D1AB8E5B10F4B
9B270C11818D3575FB13563B79420CF6EEB843180D66D956BC9A1026DF21D36C
39976478BB85E28BB7F3745FCBD6D6425AF37A72BA08F9DD4DCF5CB9D2D90FCE
92DFC213306EDA33F9BC69792B16720DAEAC448C656C4D01EE1EAB9C014589EB
4F3260156D5BA53D2FADAD0FBD2D5A3B9B33B9AA93643D168B6C2BEA2651430C
48561F0F9C6884A71305B757B390716574415EC58B8163E7E4AB80A8DA88CF0D
1829E6FEA4104B734FBC92A99F22FDAA385157726205F27E33372A3D118C92BA
9C69DABD6F2BCBAD9A4851267AC6D3A117CED3170BA1A11FBA84C6FEF7BC3B70
8E03BB5C68EED2DD8849FC3896A7EAA0BD68CFB9ED2A1A4320694E4FE0A2359B
6AA2AFEEB0D5919E7C9CD0AE03AE0193EED780FC78C9161052CC2D2679F1449A
C751C54FF425DBF971949B89AEBECBE4C7598E3270C91F3D531ECEBA8DA3E7BF
1FC2B598983FFEE919CAFE53A33CE7EB66D9EC0905893361663E7024C9F54294
DC1424537D6C25664FA0EC952186B334CC2D0CEAB9DFFA478FF7494ACA362A69
D865A10D297C8B2F56D73AAC7C4F92E76E7E2DDD6CF9C28C278C1EA6472B9948
06D0CACE1A2EE976FA8030FB5B73F699C9F2235BB915C4DA99D3774D76D1CDA6
37468277532D9A56FDE5441EA6A1725768531973F1536682AD07B9A846683AAF
00FC1F698CB3499E7CDA903EB8FEA2F301C5BA98FC66DF9CAE6AD67AC69BF264
4127F000EC635C752B81C80D8546B790B6775C320B0A24D8006E8131E6FCA51E
A4FEC26B020B6BC7B029768195FE251477987C1206D1120553EFDC685CAE78DE
61918E09A11C925172A436E0A2F1BB4DD53361F8396E6D1945398D7C6EB5E8F1
EF032F61B174A19AD53A04D344AB66469D737CFA21BF5FF77D90CED6248B43FD
0F23F89221D6CA5E398F568B79D966878EBF6DFD0B32A54D8FD7D1420E867D07
23769D509A1703C6B37481367DED4397F2EA75ADFC1DEC93CF779AF2841D34F6
F64A2A7F03B9AAD1BF627CBAD9673471FB59642BC892A2AADAE6308B370A3BA9
2506793F587A1FADD274260C8FA7ADB6A0EB3C9BBF8B1BE695E7693757C78C88
7C188F21EF0D2E3FC2825737612A42F17A8F622259F5B8DB3B0A851FBC705929
94711545256A5652064E9E03E25965C8707D30D679D90CA0548E3F27DF88EED6
4EAACA0E7AA3C5D55C3317780ADE13011BA4B87B6742E3E59BC58280995FA7A9
0D27E5DF69582502512BA19CADF54CDC996AE1219D3E9FCA88F44A97D51BC138
2321E805C8DF0DE2CDEE29CD6487C892110AB3E19D8E5A70A41C16384585C569
5E0E71877613E3A7FA244847449E5B87B1507AFCE3023058D9BF448AE6C56C20
62C0AAB992C8A9488EC28387AF3FD388A32C00E39689561BCE12E4E2063ADD7D
3E0A1C2FF1328867F41E6CDF91F159363DD17A993A90A8F04423EBBDAF8B6527
9600BFE6EF6BC5DD5E758D4BC574C9F52A9DF89C069A7E3A8CB03423D51C51D6
8D057EF4922B79897AC131F5D6B91C5CAFD115F8F08A46116E9F03D419C423EE
250BE48BFA3E4C22A05F2F9B54A3A874D329D3EF982CEF0405CE84553E101593
5B6DCCCA56D7F6F593AFA83F2B17C521EC9ECA7DBE5440B4FDB01F5741FF676B
6D8451CF225A1AF8BA34CA113E25E660D1A023C7246E00D0285D8F8B69F4E4E2
C393803A3CFA7EBEAA557BD617283C316AAE041BBF448D6342BF9787F25F5043
6ABF2E092825F5A807E5CBF12946585738D1C711B2FC63884E4AC8DE746593CE
8685FC332ECDA8CF6220A83413605B84F94F7304DC7242D6A25979D16F68D4C5
E6731FB2DB9144F95D1FB8C3BEEEF630390241C07F4AA4DEDB90D6DD2BE48E9A
9C125C587331151437B3D062299ABB918FF662A5262C794646A5552E4823B097
AA7067FABDB62DBDA450E0BC89121D8787F53C316CEE81CA6963300DC9965D80
6D055CAC9C4343AE0C452C6B2163BAFC0255D26B00E6708DC9EBD3C6D6D6589F
8A32D00ED39A973FDA9400FE41A8CCA7EE52B95018765568D7522177C00BE92C
21DD5512F6C7E8160F6C478A9E1428E6965872EFB72BF2D0BB94C71A1485422C
5E3770AC17D637A4C4A0695E47EAE7742E6C346DEC1CD714CB2DA6604E2C3628
4D5245AD91E1A0239F15F1A95D3EDF2FEBE4270DFACE400713E5D582F6BF6FBA
2460D652A2D935A1E10F4F3FA9F5A294C001BDCC328380F220A29C83D3CDE52D
3B90453F3B55BA529AF6E22D8F635D12F3D355F1C8CD302E2007FCA29E3421D7
DC67E81F0833A3E2F64F7200DA71286C8FDF5F2653C608EEC310F8378D39241B
8F36A5A49D0E7DB34A6542D9DBC7A5C231A63EADD79D80DFA2A4EBF47DECBC14
EF1519D79526D2DEF05E8643983A4735DAAC86A1E0A7CD47DDE896256D05F26D
603D182EDCC540619E4902AB27B66EB5ED530E8FB74AFDD674DD71F5F94AF36B
D90912D3C6F51500CC31FBCC19E4EC7361E28D6CCB180FB88BE6FEA0993C1CC0
E35FFE5E9819AD162969BDD54C0D387B87B54D34233BF3B18E6A7000E7CEE227
A42A3E5C1CCFE8065AFA5F675993060D3F90973EF2C573D7A9250B19C283A491
830B21E3955B49E275A4751D9F11D04E42508A4B433876B409B98A1DBE21E47F
FCCFE5672833BFE7E827A1C30D4BC1C133B7B9431F6149F98BA83997349B2F90
68713D8179A89E576127080B756EA4F97D4DBA1C4B3E722622B64623A2501A3C
42077308917C58401896F8294EBB76754F197CC7DF025C4EF9F7206B511644D7
3A4B0802A63BADB450566C8A202E4AE6410126E3EDDE05BC013527DAE4CA0179
14AFAAB5DB4A1CA018359972647FCD8756BFA15E4D83D117C583AFF20ECA2D21
5B4EA9FAC5B637830FABFEED842F5919EB4A002994CEFC048F7400A95300EA84
E15EFDC982F28C033374DDAF484A76E734EB1F382053126093089F6C99966BFD
2D8C742050CFCA08128B087104D8DA86900F8CD807BCCBB6C8193D5904C0BF50
848914B0A39175A1A8EE1E7CAEF99B1512C5C61F38809C6D21FDEB3E29E31D15
9D6424BF2615C9FCE4FBD5278F9079A3659401B2540EDF261EE39CFEF2A29D3C
907EDC0D671B40F1594C59B063E2E2BF9057007312DFB87B7DB6491F9B9C13F1
5E98AA606846E922D5241AEE76E0290F1C2E5748E12C42E8FC0361F0D9E2EA45
768FF343FFD438B4580A106E524ACDC775D1A91F4CCA4C7DC87F0D2DCFE9D8CC
0CE1A18CFC41F220A6626C6407F504135211C17569887FE54B4054128502DFE3
C2945642C0484CDA2FFA48150892C3C78EDD06934332AB8A89D4DFB16521D82F
32123EF2274200F7CC672F07AF1BEF69AECD6403DC4037A187D3DE2BBD2CB4C4
BB0798F75FBE8DAE5B11687F745A9136419F584BE7318EAF26373E931425846F
ADCFD2DE92E63ED2001E41371DC574D71AA89F436B881DDE929D859867D7DE20
2D0027A041CE1B45BC066185B2C530C42FF1AE81A4A21205E9DCF1468E423F51
3244A8AC8F3EA0B5A771B83725E7866740A415D6A8CEB4090CDFCF9467075949
94356EA261E78D37ECB54469913034348E5C2D09CE1FEA8530BF97073B73F5E1
154D3E60BE3D7738230D6A017245B1A878785D256F248BD32693DAA19A6DBB0B
69CDEA01CEA8FFF6FF20C1109E48EDA2AE9F56790424D66E0D7335B590060D2D
B53AF8201D001F140F563D85D3D6CF95954870FB597E04D2F8464643A21F1BC6
A5D726441EA18E858C07D8211E9F606FB5A1081FCD53B86C17DC4FE8F779499E
389D13CE441A32B48B64B9A3740F3200D5D307FDE7FC4997CF640FD396D06C63
0CC50A06E44A86218B56D8F091A46C4CEADFA15F2750FF203F4BA120535F313F
49BD9F19B321CE3A4927A794A6697E13BAB506B1963C985C9C3A8EC18F3D85D0
93C339080AF4EF5CA62B1666F68706E3BC56270047967CD8FFFAA8B705FE1EA5
8B5241731FCE70C2F4A46D5F2B266843B1EA7644213AB1A3CB10676C17ADD60B
CE97338D74498050C365DDDE19664260721D5CE6F502AEAA8AA1FB8FECFD3408
FCCB15E58F23721571F6F8CA198FA80CB3C0C98D32B0B6365DBCA7671D72A27D
B9A2A63DEEAAD1D7F7E70F8225E38CCBD1944C452CD6CD222397F0FA5F566714
2CFBB842336682A6EEB837B5B48682C92E626F78D80C2E47B8E0FF90B01A55F3
E1C955912349F2DD4F29283D3BB0A7905431ECC7CA8E09CA2428AFCFF444E0E9
A38C866311146FD075F3232A48C8524BB99F9483B99B7BFBDCC29B139765A53A
EAD93EF90AA569BB4D29BE77E14944FE218D1982FD590903C7B687B95D5D103D
14DF7A141E05150ACF977562583F085EE228590EC308AE8DF6B04B319C6C113A
3B7421CF9995FDE78E5615086DAC8F18FC085B4E1B1F1F1CAF7730FCD9CA1626
1B778867DE4A9A2408A5288263AA79465B48D8C55E837A380BB9BD93FAE1E808
9B5B2A64DC911A90E1709A2793E00C32D5C40A483A68B9130E159A62AFA010CC
024D783D0E0697026D934680E953CA49795FCF773A2CF2B2A6267DEC1BC57F5F
976229F69C6F4B45D32F15D07D1E521F3E7C6583CC16C740890FDC734C1B22ED
DEFD2979FCFF328A7F59627A1674B50F5ADD1B40D7E128AF6F0626ADB6BC7781
1C384ED028258C9E50AE27120FA8F6E50F929D0496D74F6BF0F99560381DC927
5B010FC289ABCF12D18503B260AA2D629E8784E70E26C85FE045BFD7F4A66E87
69A872EC1CFF33ADAE6EBFC81B5F5A7979906E72BDD9004E7EDF7E576DF70800
5B8F19EE8298C5B28F3314D87E250A798E643684CA91168901DC16482E9ADDDF
C004E3E05B0E4F3D11A41FC443AD5967F0F3FD53731AAD13F23397BFCCAFC27B
48BC5B6FFEA1A924D14796BBDDB38E9CEBC1F748E6D3972289840B779050F0F2
595D9073AAE66497CCA1875BA31BF3E7BAD91251462A1198887AE897BF3DE3E7
4133BEB50F26CA8A260EEF131CC6D86A287BB0015F83E130BA780D95F62515AB
DAD4847F73F55310EC73176DC92C81CD9BC86CA53E3A62042A0C7DEEDCF5DA09
E57FE36F55BA97FEC34ABA2FFB51EC9DB9F5EDC57934205690E0216B506DAE6E
6FD11CA06EEBFFD17CC36EA85436D40DEF68DF98F98B970A1C11FA70BDC658C9
53685C94BD7008092135A6F99E798EAFB752DA547316101469373A0276AB4ECF
9D7EA8300AE1E31CBF26ADE754F46EB32272EB485899CDAD84F81AF6ADBD87CB
A6E3778DDC470F70054896B9485B62425AB18510916FB1C6590DED857216C21D
50E401D66D4CED717AF486D734A1538F62767EE3F3DAC56F7DDA760E2732C9FD
6232EBFD1BF57A67A61D4AB862180437AB07B487A32EC5CF601DC99BBCF1CC6D
6C6E9119312D0652673B0A34160AE7E3398292C7A52BB3E44F3F31708C25D971
6C3F472B5D2BA6A6734C21750D736597A6A742E0F3DAFCA7901F4BA23EB6A504
A751F3B78B407411E2F661FAABB72EB30226BD126690EB38188482ADBC1F9420
7E2F1905A9AF320F0CA64BA7A6F55010DAF8B0F9D84ACE6114FB64C13DCD4330
875A14C1A095653DA60FD416A957208C670570F005646514B253408BA759E2C8
B5373A4B85D064D925B1443A968DC139526C24C4DDF931A50C571E50DE8DB515
5130BB360A22897879B21FDC78BAB36510D1650EAFC69F0FC71E807BD7EAEE6A
26F047AC3D536C0B8E966A0D7ECC82FEA009A8687A4558FB27B8774901D75CF5
791B85A4EB6354FC9FBF52338447F7D0D12CE0181B9AB53078D52F3FD1E25740
4239F53A2D21CDD138142B6FF5596898B9FF096D1C890E89265D8A512594F9A0
380B4C95188629BDE52CCBD7284AF7CA508BF4EFA988853F6BEE25081FAE41F9
B4844C2211D8BCA504965931C28E133A475265515395501ACB843CD7C3A39527
920FAE231A16DD46C5BFA5CAE3F4134C57EBB27F2613DB3365E80E258A1DF0BE
EA9ADA22DBCBD4C42E6CDE87CBED4937D6471E8572B77A53A9A568B07E799CEE
D56435CF75217C070B6AD793872130DC062233758AE64BB18CD1992DFFBDF7F9
4B6C3600F74193E4807142D14C13838CD8B204EA148F2B7BAF6BE81B5D50C148
B18B5FE17A6A2CA47A23513819F4EFFC4FEBBC22260E1D15BCEACE6F9B8ECB07
60DABA11BBDCEFBBC87EC4F2B03FCD3922A33593A2709489BD62652E29BDE09F
6874AC94A09D60E1906209CE0A8781BF1A6A53E2082EBDEBE340261654F0476C
F9465560A18885F4F7D6FCE7D2CDB46A162ECC3384D59815DDD5CA77B6F14A36
225FA99B2832EE77C3CAD5B8458C0C43EBEFEF7E70E066B89279D7E8B0831A16
9C40EA81021A38434BF2CCAA2F6FB9164E3606CE4237D9061FBCC54A745133B1
576F28B5A5B39D4AEF20BC4AEC71A91C7A0DD8B90387E8F27A5716643AB49144
80607AE07C0874996AA93423AE0DDF9E834B6DD3453848AEBC5B0D45D8E0820E
C4B6C179F759CA3E8967FCA032A79E8EF2D82691C0FA44B8026AD2B12214CD73
A005D0F733FE921EDBF30C646F21B81757C9505D9F6568702BE7994614896F01
7FB397C16AF79FC617E068549BAE9151055049506291501821DE190E4958938C
7ADA3E0054B9BDAB8B6EDAB2B1D2AC373E8250D9E476BB9D3CC8D66F2277371D
4AA0BB9928DDCADD48AF1B6C366635494B917AB101A6BA8965E3BC08D417263A
C05EB5161F94CA980F6FFD43D261F36592B1C5855EBCEC7327A35EE60FA94DC3
962093BC195A007195769C371DDBEF02415FACC3F3DD54BF8401F5A22906FE38
76C4D5DC864ADEE17E3EB5233EF8827EB0B9E9A81BC030E6AED3BA359DC59C57
21C249FB015BCBD93B82C108607A0AF6224882E8CF3C328B04E1B7D3866B17CC
81A0276341F53F0442E70BA788E5F0287A8C14D621AF9936B4E75575525D4D5A
891EA94F0AA2C9E2FA62829A3F90DCF8AFBD11D407B6F7F5DE24CD7D9D08680F
3F20CAAA660EAE0F93D3981FA60DF55D6B52F5322BA6A0ACB518BFE053AB257F
C347C7310493052E476EB30569EFFA194540A837F0B66BEDD91F4447A1BC13F8
8CD6996D920194D4B77A5BCB7C3BDB294BADF42013334872264F50981EB928B8
0A4D25FC8AC2FD263281F19C77A6C16076DFCF1B01B4E468CE3FA02BBAF2AFA8
4322450F9B7450C1E2F4CF1131CF862FEEDFD8D4758E9FAA30C4CCE574E75E56
D5A292561EFE1FCA4D1A7C59ED72B3ECF25B8684709FECC96303BE3C535AFB44
5B7C1D038B705603358EA0B0F9923937B3718104547AD845106647536590D510
67C42C90ACD088CE95E261AA4C0483C45BFDCB68B3014E47512E87D9968DCC98
4BAD80A8DFFF1DF2DADB400EEEBF66FA06669045885E8AC9631C653679A0534F
8F66C758F0FCB8AA771AA1FC2888B13804418121D16A1EE344FD938B3571F97E
C8F7A0921DAB8DBF1C6FB1B5E039C00B742A721B9295ED809D4EEEC5CF0C0B00
A3C403AE5C2B8AAF43F453C8C7B8B54F6CBB6020CBB1C7672C6D0D2BB6E32DE4
655796E38B473FE6B0DC0711961EE7BE8EF93E50DB45925AC94BA24D29EC34BC
698D8B64C326CBAE0FA3DFBFB5973022CF640E3E62750142D92FD634484B19C6
EA76E922318A2879FD8F378AF0255B3547C6BF59E46F59DF5BDE41C0FC206DBB
84C436110D0E092BBBF1975C81CF7CC61260CFBEC7210B19F1902D8DED9E6D06
22608E9E27ED648C6E7D38B48B25759F98432C0028FEF939E4BD4094F6BE2FE7
CC4DB40D7DF658782EEDC88364D83791E02D6497D71787DBB099C6ECB26FD5E5
2CA7B60469E9F9AC89F1349EACDE8BE6AD1950D86F22ED3EACC46FD50287E366
79D34F29D58B81EACE496DC36B4228C2D6F2C0C840AD656E31B09B9580267AE8
995BE95FA7619A599961BF5835EE72479553991EF2201244460771257AE73A02
D235C38B7CBDBED22ABB5A09C8E0475B5E7DCAB3C58D0A31BE997D8500B8FC37
08B3E83D87F33FE56CBEA3B17ABCEAA4D5B6ED6DC8DEA79A0EB30165D9070892
951D66E38605E6786C2834F316E22839DF05DD32F4A51807E68131CE6D89092A
DC4482107540C2506DA78C0777C004F4EA73EFD25F9799E78F43E591454EF0B8
A8E3A95FD01609C54BB7A28834C31A0D025436FDE7DB0E1AE48B90177D6064D9
9974A216ADF4169F828E5872C12FC8DE29D05E8BD306CB15710007E093812C89
7095FE3AF521E7F1A55AFB792576D0B830C37412DE8962DC11BCE35894A99956
60CB483E1EF5D362B3FFEF2DC328939B0F9046DB3FF45377253E62D35D9B7A1D
E83DBE4049EFD243C6B89076CB0848A84F31F2F7EC3E6ACE159C5AF81298C853
9A2290C8047D6A729BF4C5F6B435A09F025C2DDF7139B4F09ABF31FD6A860023
C5A0BF4E78F4A565379908266C8B5DA7C7C9077625351CD82EADE1D4420C5170
B13A1FDDEFCF84A282DB9294D19A3AC81395DE239648DD2106175E9173BB7D0A
C126E673B594B2F7AF55B086656525FB622209C892350D91523F258BB4B2E718
20B54DE99EBCBC96272FC9921EFB226D22304E2E355BC51569BD5AA282B4C79B
FF33E8AE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 86 /V put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF728D2A654E52B6A6C90A3A
725F86627D7C3EC5AF5AC512976D35FE42AACA3FECB401788D0BFFD9F4743BB2
EC5B4E7891F216DCA5A69E917A171E0069A03FB214ED307DE947225049D46E0C
4707503F09811A597A9113921AAC23AB1CAA9866F81A02BDF349FAB129F23E86
E384C043053055938D42ACBF9F0EE86CEBEB011BD5BB7D593104140E6AA9CFB0
4E0B47C91E504BB6A95B2CBC36EC03BE01897C3D498EB30FBE4BD9584B9D766F
CB3CC7C96FDA76A7E60CA9BC2BB7783E87F39D1FF9A601B901D6AE0E54F54675
F46D578CFBAB6B40389C2C4EC649A3AB02CC644612F35C621026D26A4428FA22
381EC4B61A6DE77764D7E99704A141EBF0A89C25646D758C723B42F1F538AFAB
EA9F93555B49A185E920F736EDD63B6B76C50E3B0C8A1307CAAC32E8F2626677
8AE7D1A95E6A31672CDD31719236C908FA520E1A644C296A389F4859A80ACE2D
2A8991A6E542056A691846157B47B68B1930135B6E8850E48B1774DF59374F3D
3EE8A9FEEC2E976A4A267E2861FBF0E240E975A7254F6BDE09739F6DCB4958EF
3E73AAD44352C1601FC60FB9D2A4D9E0EB687AC613F52C4EFD783EA3C96B1EFA
B3B5DE64211EA2D4E8D9208B5548853E56E63102CC3909566DFEA75DFC79EB63
30B957F4B596A44FB985
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /gamma put
dup 20 /kappa put
dup 109 /m put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D91051800EE6C54285
AB0594D87D05EB4CB44FFC094DA0072AE7D4BF2F4F9BB812FED256B937BC2574
8C529F97ABB92D8C142C6076250AE811E0CA2E52A0EB2F557A5C07A78345FB52
F0AA36B298D10EB23A3E874EC9B5D181D63588A8C149B2E0F9DEE873D55EE538
EF7D3CA0097B6F00FC2C1D551AA777468F84E537E0CF1C546B0D58FAE31E33F4
134D7B4DB04B72B25CF31FA082C35717D79B7742F868946051560EC6E2D4F580
7081B56DF55B2C1182B23774BB218B2FC3864F3BCB1868A1389B5616B3A7B514
7ADBEDF4B99E3B2D2E6F3D1C7E672691AB13FCB507AB7934BB2ABAC00A12750E
A2C8F5BFF3A510BE01B995B30AD04B20CDE89ABCB4F1D5EBE0C47420FC2F25C6
F1511F132354C9C56768D1D40A89D7C938113A2BDAF9FB957197B5FE32A80F45
8A149165433E77048D5C276F7AA878B7E069C93723539357B8A37340BA82F1B0
ECC9DACBD890CFB3D44824EE9884FBF09C97E70251773663D61995D746E96E47
CA9D8D7FE1AE16AC7C4A2B8E2DE821A366C4F574873475A46E9DAA1A785352E0
E1B31E51A0D31C55194F37181BA3BCFB27B52AFE42566CCFF9F272A152166D50
8A882A54F030C275E8810629111D33248ABE3E35268433B48F80C395568C2EE5
2A16BB39539CB99BBB13BFB16783CD4C94959929F16EF9AA6B6FD95B547AF0F6
1C84D2A83C5243C0AF1058291E4E5B7C6EFA23DC93DCB0EDD426DD65BC6ADBAC
92858D3F5118F92AD7921F96C67D0A1719C78A794014EF7C132D4F8C50FB7F17
5FF17EEF2B05C4528334A39B2CA3939FBAFF48C6564FCF648AFDC716A25F0EF4
24BCEDD0D63AA2C98F0687E1A047B7629635BAEC64F4DF0F3F941F6D1D46A0FE
E978CACC97C06EC44867ED6597B51922B0C197E219CECF2B9E6B6F74DFE13966
3F14FD0A30263FB036EAAB3548C6F87671934A98CA9D5A7BFF65D8C9509BB529
DD60B52163D10F20300AB98C8F658E68F457F83B0907EB443DF3B4B6AE9B458F
94D89605835A2721722C958692B85699E7909019CEDCD1C9524E01C552B6D269
5F608874737FA0EAC55F701861012FB0C16E88966C285B94223846F399F226A3
5BDFEB4F1CB8A53A291CD447B79FECEE64534FA29C157B2709BBD0BE94A849A3
71189932CDBEB2A4999AF73EC60BDE4FD2D3E49D47B7BF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (DM_contours.dvi)
@start /Fa 255[55{}1 66.4176 /CMSY8 rf /Fb 201[35 35
35 35 35 35 49[{}6 66.4176 /CMR8 rf /Fc 135[48 2[51 35
36 4[51 76 1[48 1[25 1[45 1[40 1[40 12[68 3[67 9[68 71
4[64 16[45 45 6[35 35 40[{}20 90.9091 /CMR10 rf /Fd 169[41
86[{}1 66.4176 /CMMI8 rf /Fe 146[80 88[52 20[{}2 90.9091
/CMMI10 rf /Ff 242[43 13[{}1 83.022 /CMMI10 rf /Fg 138[46
1[33 9[23 3[37 46 11[62 4[46 3[65 62 76 7[57 1[60 59
62 15[42 42 36[48 11[{}17 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 482 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0
482 a 0 482 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 482 a 0 482 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 482 a 0 TeXcolorgray
1889 x @beginspecial @setspecial
 /gnudict 256 dict def gnudict begin /Color true def /Blacktext true
def /Solid false def /Dashlength 2 def /Landscape false def /Level1
false def /Level3 false def /Rounded false def /ClipToBoundingBox false
def /SuppressPDFMark false def /TransparentPatterns false def /gnulinewidth
5.000 def /userlinewidth gnulinewidth def /Gamma 1.0 def /BackgroundColor
{-1.000 -1.000 -1.000} def /vshift -66 def /dl1 {   10.0 Dashlength
mul mul   Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01
} if } if } def /dl2 {   10.0 Dashlength mul mul   Rounded { currentlinewidth
0.75 mul add } if } def /hpt_ 31.5 def /vpt_ 31.5 def /hpt hpt_ def
/vpt vpt_ def /doclip {   ClipToBoundingBox {     newpath 0 0 moveto
324 0 lineto 324 226 lineto 0 226 lineto closepath     clip   } if
} def /M {moveto} bind def /L {lineto} bind def /R {rmoveto} bind def
/V {rlineto} bind def /N {newpath moveto} bind def /Z {closepath} bind
def /C {setrgbcolor} bind def /f {rlineto fill} bind def /g {setgray}
bind def /Gshow {show} def   /vpt2 vpt 2 mul def /hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R Blacktext {gsave 0 setgray
textshow grestore} {textshow} ifelse} def /Rshow {currentpoint stroke
M dup stringwidth pop neg vshift R Blacktext {gsave 0 setgray textshow
grestore} {textshow} ifelse} def /Cshow {currentpoint stroke M dup
stringwidth pop -2 div vshift R Blacktext {gsave 0 setgray textshow
grestore} {textshow} ifelse} def /UP {dup vpt_ mul /vpt exch def hpt_
mul /hpt exch def   /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def /DL
{Color {setrgbcolor Solid {pop []} if 0 setdash}  {pop pop pop 0 setgray
Solid {pop []} if 0 setdash} ifelse} def /BL {stroke userlinewidth
2 mul setlinewidth Rounded {1 setlinejoin 1 setlinecap} if} def /AL
{stroke userlinewidth 2 div setlinewidth Rounded {1 setlinejoin 1 setlinecap}
if} def /UL {dup gnulinewidth mul /userlinewidth exch def dup 1 lt
{pop 1} if 10 mul /udl exch def} def /PL {stroke userlinewidth setlinewidth
Rounded {1 setlinejoin 1 setlinecap} if} def 3.8 setmiterlimit /LCw
{1 1 1} def /LCb {0 0 0} def /LCa {0 0 0} def /LC0 {1 0 0} def /LC1
{0 1 0} def /LC2 {0 0 1} def /LC3 {1 0 1} def /LC4 {0 1 1} def /LC5
{1 1 0} def /LC6 {0 0 0} def /LC7 {1 0.3 0} def /LC8 {0.5 0.5 0.5}
def /LTw {PL [] 1 setgray} def /LTb {BL [] LCb DL} def /LTa {AL [1
udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def /LT0 {PL [] LC0 DL}
def /LT1 {PL [2 dl1 3 dl2] LC1 DL} def /LT2 {PL [1 dl1 1.5 dl2] LC2
DL} def /LT3 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC3 DL} def /LT4 {PL [1
dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def /LT5 {PL [4 dl1 2 dl2]
LC5 DL} def /LT6 {PL [1.5 dl1 1.5 dl2 1.5 dl1 1.5 dl2 1.5 dl1 6 dl2]
LC6 DL} def /LT7 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC7 DL} def /LT8 {PL
[2 dl1 2 dl2 2 dl1 6 dl2] LC8 DL} def /SL {[] 0 setdash} def /Pnt {stroke
[] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def /Dia {stroke
[] 0 setdash 2 copy vpt add M   hpt neg vpt neg V hpt vpt neg V   hpt
vpt V hpt neg vpt V closepath stroke   Pnt} def /Pls {stroke [] 0 setdash
vpt sub M 0 vpt2 V   currentpoint stroke M   hpt neg vpt neg R hpt2
0 V stroke  } def /Box {stroke [] 0 setdash 2 copy exch hpt sub exch
vpt add M   0 vpt2 neg V hpt2 0 V 0 vpt2 V   hpt2 neg 0 V closepath
stroke   Pnt} def /Crs {stroke [] 0 setdash exch hpt sub exch vpt add
M   hpt2 vpt2 neg V currentpoint stroke M   hpt2 neg 0 R hpt2 vpt2
V stroke} def /TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V   hpt 2 mul 0 V   hpt neg vpt 1.62 mul V
closepath stroke   Pnt} def /Star {2 copy Pls Crs} def /BoxF {stroke
[] 0 setdash exch hpt sub exch vpt add M   0 vpt2 neg V hpt2 0 V 0
vpt2 V   hpt2 neg 0 V closepath fill} def /TriUF {stroke [] 0 setdash
vpt 1.12 mul add M   hpt neg vpt -1.62 mul V   hpt 2 mul 0 V   hpt
neg vpt 1.62 mul V closepath fill} def /TriD {stroke [] 0 setdash 2
copy vpt 1.12 mul sub M   hpt neg vpt 1.62 mul V   hpt 2 mul 0 V  
hpt neg vpt -1.62 mul V closepath stroke   Pnt} def /TriDF {stroke
[] 0 setdash vpt 1.12 mul sub M   hpt neg vpt 1.62 mul V   hpt 2 mul
0 V   hpt neg vpt -1.62 mul V closepath fill} def /DiaF {stroke []
0 setdash vpt add M   hpt neg vpt neg V hpt vpt neg V   hpt vpt V hpt
neg vpt V closepath fill} def /Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat   closepath stroke
grestore Pnt} def /PentF {stroke [] 0 setdash gsave   translate 0 hpt
M 4 {72 rotate 0 hpt L} repeat   closepath fill grestore} def /Circle
{stroke [] 0 setdash 2 copy   hpt 0 360 arc stroke Pnt} def /CircleF
{stroke [] 0 setdash hpt 0 360 arc fill} def /C0 {BL [] 0 setdash 2
copy moveto vpt 90 450 arc} bind def /C1 {BL [] 0 setdash 2 copy moveto
2 copy vpt 0 90 arc closepath fill vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto 2 copy vpt 90 180 arc closepath
fill vpt 0 360 arc closepath} bind def /C3 {BL [] 0 setdash 2 copy
moveto 2 copy vpt 0 180 arc closepath fill vpt 0 360 arc closepath}
bind def /C4 {BL [] 0 setdash 2 copy moveto 2 copy vpt 180 270 arc
closepath fill vpt 0 360 arc closepath} bind def /C5 {BL [] 0 setdash
2 copy moveto 2 copy vpt 0 90 arc 2 copy moveto 2 copy vpt 180 270
arc closepath fill vpt 0 360 arc} bind def /C6 {BL [] 0 setdash 2 copy
moveto 2 copy vpt 90 270 arc closepath fill vpt 0 360 arc closepath}
bind def /C7 {BL [] 0 setdash 2 copy moveto 2 copy vpt 0 270 arc closepath
fill vpt 0 360 arc closepath} bind def /C8 {BL [] 0 setdash 2 copy
moveto 2 copy vpt 270 360 arc closepath fill vpt 0 360 arc closepath}
bind def /C9 {BL [] 0 setdash 2 copy moveto 2 copy vpt 270 450 arc
closepath fill vpt 0 360 arc closepath} bind def /C10 {BL [] 0 setdash
2 copy 2 copy moveto vpt 270 360 arc closepath fill 2 copy moveto 2
copy vpt 90 180 arc closepath fill vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto 2 copy vpt 0 180 arc closepath
fill 2 copy moveto 2 copy vpt 270 360 arc closepath fill vpt 0 360
arc closepath} bind def /C12 {BL [] 0 setdash 2 copy moveto 2 copy
vpt 180 360 arc closepath fill vpt 0 360 arc closepath} bind def /C13
{BL [] 0 setdash 2 copy moveto 2 copy vpt 0 90 arc closepath fill 2
copy moveto 2 copy vpt 180 360 arc closepath fill vpt 0 360 arc closepath}
bind def /C14 {BL [] 0 setdash 2 copy moveto 2 copy vpt 90 360 arc
closepath fill vpt 0 360 arc} bind def /C15 {BL [] 0 setdash 2 copy
vpt 0 360 arc closepath fill vpt 0 360 arc closepath} bind def /Rec
{newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto neg 0 rlineto
closepath} bind def /Square {dup Rec} bind def /Bsquare {vpt sub exch
vpt sub exch vpt2 Square} bind def /S0 {BL [] 0 setdash 2 copy moveto
0 vpt rlineto BL Bsquare} bind def /S1 {BL [] 0 setdash 2 copy vpt
Square fill Bsquare} bind def /S2 {BL [] 0 setdash 2 copy exch vpt
sub exch vpt Square fill Bsquare} bind def /S3 {BL [] 0 setdash 2 copy
exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def /S4 {BL [] 0
setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind
def /S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill exch vpt sub
exch vpt sub vpt Square fill Bsquare} bind def /S6 {BL [] 0 setdash
2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec
fill 2 copy vpt Square fill Bsquare} bind def /S8 {BL [] 0 setdash
2 copy vpt sub vpt Square fill Bsquare} bind def /S9 {BL [] 0 setdash
2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def /S10 {BL [] 0 setdash
2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square
fill Bsquare} bind def /S11 {BL [] 0 setdash 2 copy vpt sub vpt Square
fill 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def /S12
{BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
Bsquare} bind def /S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt
sub vpt2 vpt Rec fill 2 copy vpt Square fill Bsquare} bind def /S14
{BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
2 copy exch vpt sub exch vpt Square fill Bsquare} bind def /S15 {BL
[] 0 setdash 2 copy Bsquare fill Bsquare} bind def /D0 {gsave translate
45 rotate 0 0 S0 stroke grestore} bind def /D1 {gsave translate 45
rotate 0 0 S1 stroke grestore} bind def /D2 {gsave translate 45 rotate
0 0 S2 stroke grestore} bind def /D3 {gsave translate 45 rotate 0 0
S3 stroke grestore} bind def /D4 {gsave translate 45 rotate 0 0 S4
stroke grestore} bind def /D5 {gsave translate 45 rotate 0 0 S5 stroke
grestore} bind def /D6 {gsave translate 45 rotate 0 0 S6 stroke grestore}
bind def /D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind
def /D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def /D10
{gsave translate 45 rotate 0 0 S10 stroke grestore} bind def /D11 {gsave
translate 45 rotate 0 0 S11 stroke grestore} bind def /D12 {gsave translate
45 rotate 0 0 S12 stroke grestore} bind def /D13 {gsave translate 45
rotate 0 0 S13 stroke grestore} bind def /D14 {gsave translate 45 rotate
0 0 S14 stroke grestore} bind def /D15 {gsave translate 45 rotate 0
0 S15 stroke grestore} bind def /DiaE {stroke [] 0 setdash vpt add
M   hpt neg vpt neg V hpt vpt neg V   hpt vpt V hpt neg vpt V closepath
stroke} def /BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V   hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M   hpt neg vpt -1.62
mul V   hpt 2 mul 0 V   hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M   hpt neg vpt 1.62 mul
V   hpt 2 mul 0 V   hpt neg vpt -1.62 mul V closepath stroke} def /PentE
{stroke [] 0 setdash gsave   translate 0 hpt M 4 {72 rotate 0 hpt L}
repeat   closepath stroke grestore} def /CircE {stroke [] 0 setdash
  hpt 0 360 arc stroke} def /Opaque {gsave closepath 1 setgray fill
grestore 0 setgray closepath} def /DiaW {stroke [] 0 setdash vpt add
M   hpt neg vpt neg V hpt vpt neg V   hpt vpt V hpt neg vpt V Opaque
stroke} def /BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V   hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M   hpt neg vpt -1.62
mul V   hpt 2 mul 0 V   hpt neg vpt 1.62 mul V Opaque stroke} def /TriDW
{stroke [] 0 setdash vpt 1.12 mul sub M   hpt neg vpt 1.62 mul V  
hpt 2 mul 0 V   hpt neg vpt -1.62 mul V Opaque stroke} def /PentW {stroke
[] 0 setdash gsave   translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def /CircW {stroke [] 0 setdash   hpt 0 360
arc Opaque stroke} def /BoxFill {gsave Rec 1 setgray fill grestore}
def /Density {   /Fillden exch def   currentrgbcolor   /ColB exch def
/ColG exch def /ColR exch def   /ColR ColR Fillden mul Fillden sub
1 add def   /ColG ColG Fillden mul Fillden sub 1 add def   /ColB ColB
Fillden mul Fillden sub 1 add def   ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def /PolyFill {gsave Density fill
grestore grestore} def /h {rlineto rlineto rlineto gsave closepath
fill grestore} bind def /PatternFill {gsave /PFa [ 9 2 roll ] def 
 PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec   TransparentPatterns
{} {gsave 1 setgray fill grestore} ifelse   clip   currentlinewidth
0.5 mul setlinewidth   /PFs PFa 2 get dup mul PFa 3 get dup mul add
sqrt def   0 0 M PFa 5 get rotate PFs -2 div dup translate   0 1 PFs
PFa 4 get div 1 add floor cvi {PFa 4 get mul 0 M 0 PFs V} for   0 PFa
6 get ne { 0 1 PFs PFa 4 get div 1 add floor cvi {PFa 4 get mul 0 2
1 roll M PFs 0 V} for  } if   stroke grestore} def /languagelevel where
 {pop languagelevel} {1} ifelse dup 2 lt {/InterpretLevel1 true def
 /InterpretLevel3 false def} {/InterpretLevel1 Level1 def  2 gt   
 {/InterpretLevel3 Level3 def}     {/InterpretLevel3 false def}  ifelse
}  ifelse /Level2PatternFill { /Tile8x8 {/PaintType 2 /PatternType
1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8} bind def /KeepColor
{currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def << Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} >>
matrix makepattern /Pat1 exch def << Tile8x8  /PaintProc {0.5 setlinewidth
pop 0 0 M 8 8 L 0 8 M 8 0 L stroke 0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern /Pat2 exch def << Tile8x8  /PaintProc {0.5 setlinewidth
pop 0 0 M 0 8 L 8 8 L 8 0 L 0 0 L fill} >> matrix makepattern /Pat3
exch def << Tile8x8  /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
0 12 M 12 0 L stroke} >> matrix makepattern /Pat4 exch def << Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L 0 -4 M 12 8 L stroke}
>> matrix makepattern /Pat5 exch def << Tile8x8  /PaintProc {0.5 setlinewidth
pop -2 8 M 4 -4 L 0 12 M 8 -4 L 4 12 M 10 0 L stroke} >> matrix makepattern
/Pat6 exch def << Tile8x8  /PaintProc {0.5 setlinewidth pop -2 0 M
4 12 L 0 -4 M 8 12 L 4 -4 M 10 8 L stroke} >> matrix makepattern /Pat7
exch def << Tile8x8  /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
12 0 M -4 8 L 12 4 M 0 10 L stroke} >> matrix makepattern /Pat8 exch
def << Tile8x8  /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L -4 0
M 12 8 L -4 4 M 8 10 L stroke} >> matrix makepattern /Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def /Pattern2
{PatternBgnd KeepColor Pat2 setpattern} bind def /Pattern3 {PatternBgnd
KeepColor Pat3 setpattern} bind def /Pattern4 {PatternBgnd KeepColor
Landscape {Pat5} {Pat4} ifelse setpattern} bind def /Pattern5 {PatternBgnd
KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def /Pattern6
{PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind
def /Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse
setpattern} bind def } def /PatternBgnd {   TransparentPatterns {}
{gsave 1 setgray fill grestore} ifelse } def /Level1PatternFill { /Pattern1
{0.250 Density} bind def /Pattern2 {0.500 Density} bind def /Pattern3
{0.750 Density} bind def /Pattern4 {0.125 Density} bind def /Pattern5
{0.375 Density} bind def /Pattern6 {0.625 Density} bind def /Pattern7
{0.875 Density} bind def } def Level1 {Level1PatternFill} {Level2PatternFill}
ifelse /Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont dup
length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall currentdict
end definefont pop Level1 SuppressPDFMark or {} { /SDict 10 dict def
systemdict /pdfmark known not {   userdict /pdfmark systemdict /cleartomark
get put } if SDict begin [   /Title (DM_contours.plot)   /Subject (gnuplot plot)
  /Creator (gnuplot 5.0 patchlevel 0)   /Author (josef)   /CreationDate
(Wed Jul 22 11:00:50 2015)   /DOCINFO pdfmark end } ifelse end /InitTextBox
{ userdict /TBy2 3 -1 roll put userdict /TBx2 3 -1 roll put       
    userdict /TBy1 3 -1 roll put userdict /TBx1 3 -1 roll put    /Boxing
true def } def /ExtendTextBox { Boxing     { gsave dup false charpath
pathbbox       dup TBy2 gt {userdict /TBy2 3 -1 roll put} {pop} ifelse
      dup TBx2 gt {userdict /TBx2 3 -1 roll put} {pop} ifelse     
 dup TBy1 lt {userdict /TBy1 3 -1 roll put} {pop} ifelse       dup
TBx1 lt {userdict /TBx1 3 -1 roll put} {pop} ifelse       grestore
} if } def /PopTextBox { newpath TBx1 TBxmargin sub TBy1 TBymargin
sub M                TBx1 TBxmargin sub TBy2 TBymargin add L      
 TBx2 TBxmargin add TBy2 TBymargin add L        TBx2 TBxmargin add
TBy1 TBymargin sub L closepath } def /DrawTextBox { PopTextBox stroke
/Boxing false def} def /FillTextBox { gsave PopTextBox 1 1 1 setrgbcolor
fill grestore /Boxing false def} def 0 0 0 0 InitTextBox /TBxmargin
20 def /TBymargin 20 def /Boxing false def /textshow { ExtendTextBox
Gshow } def gnudict begin gsave doclip 0 0 translate 0.050 0.050 scale
0 setgray newpath BackgroundColor 0 lt 3 1 roll 0 lt exch 0 lt or or
not {BackgroundColor C 1.000 0 0 6480.00 4536.00 BoxColFill} if 1.000
UL LTb LCb setrgbcolor 972 0 M 94 0 V 5507 0 M -94 0 V stroke LTb LCb
setrgbcolor 972 341 M 47 0 V 4488 0 R -47 0 V 972 541 M 47 0 V 4488
0 R -47 0 V 972 683 M 47 0 V 4488 0 R -47 0 V 972 792 M 47 0 V 4488
0 R -47 0 V 972 882 M 47 0 V 4488 0 R -47 0 V 972 958 M 47 0 V 4488
0 R -47 0 V 972 1024 M 47 0 V 4488 0 R -47 0 V 972 1082 M 47 0 V 4488
0 R -47 0 V 972 1134 M 94 0 V 4441 0 R -94 0 V stroke LTb LCb setrgbcolor
972 1475 M 47 0 V 4488 0 R -47 0 V 972 1675 M 47 0 V 4488 0 R -47 0
V 972 1816 M 47 0 V 4488 0 R -47 0 V 972 1926 M 47 0 V 4488 0 R -47
0 V 972 2016 M 47 0 V 4488 0 R -47 0 V 972 2092 M 47 0 V 4488 0 R -47
0 V 972 2158 M 47 0 V 4488 0 R -47 0 V 972 2216 M 47 0 V 4488 0 R -47
0 V 972 2267 M 94 0 V 4441 0 R -94 0 V stroke LTb LCb setrgbcolor 972
2609 M 47 0 V 4488 0 R -47 0 V 972 2808 M 47 0 V 4488 0 R -47 0 V 972
2950 M 47 0 V 4488 0 R -47 0 V 972 3060 M 47 0 V 4488 0 R -47 0 V 972
3150 M 47 0 V 4488 0 R -47 0 V 972 3226 M 47 0 V 4488 0 R -47 0 V 972
3291 M 47 0 V 4488 0 R -47 0 V 972 3349 M 47 0 V 4488 0 R -47 0 V 972
3401 M 94 0 V 4441 0 R -94 0 V stroke LTb LCb setrgbcolor 972 3743
M 47 0 V 4488 0 R -47 0 V 972 3942 M 47 0 V 4488 0 R -47 0 V 972 4084
M 47 0 V 4488 0 R -47 0 V 972 4194 M 47 0 V 4488 0 R -47 0 V 972 4283
M 47 0 V 4488 0 R -47 0 V 972 4359 M 47 0 V 4488 0 R -47 0 V 972 4425
M 47 0 V 4488 0 R -47 0 V 972 4483 M 47 0 V 4488 0 R -47 0 V 972 4535
M 94 0 V 4441 0 R -94 0 V stroke LTb LCb setrgbcolor 972 0 M 0 94 V
0 4441 R 0 -94 V stroke LTb LCb setrgbcolor 1200 0 M 0 47 V 0 4488
R 0 -47 V 1333 0 M 0 47 V 0 4488 R 0 -47 V 1427 0 M 0 47 V 0 4488 R
0 -47 V 1500 0 M 0 47 V 0 4488 R 0 -47 V 1560 0 M 0 47 V 0 4488 R 0
-47 V 1611 0 M 0 47 V 0 4488 R 0 -47 V 1655 0 M 0 47 V 0 4488 R 0 -47
V 1693 0 M 0 47 V 0 4488 R 0 -47 V 1728 0 M 0 94 V 0 4441 R 0 -94 V
stroke LTb LCb setrgbcolor 1955 0 M 0 47 V 0 4488 R 0 -47 V 2088 0
M 0 47 V 0 4488 R 0 -47 V 2183 0 M 0 47 V 0 4488 R 0 -47 V 2256 0 M
0 47 V 0 4488 R 0 -47 V 2316 0 M 0 47 V 0 4488 R 0 -47 V 2367 0 M 0
47 V 0 4488 R 0 -47 V 2410 0 M 0 47 V 0 4488 R 0 -47 V 2449 0 M 0 47
V 0 4488 R 0 -47 V 2484 0 M 0 94 V 0 4441 R 0 -94 V stroke LTb LCb
setrgbcolor 2711 0 M 0 47 V 0 4488 R 0 -47 V 2844 0 M 0 47 V 0 4488
R 0 -47 V 2939 0 M 0 47 V 0 4488 R 0 -47 V 3012 0 M 0 47 V 0 4488 R
0 -47 V 3072 0 M 0 47 V 0 4488 R 0 -47 V 3122 0 M 0 47 V 0 4488 R 0
-47 V 3166 0 M 0 47 V 0 4488 R 0 -47 V 3205 0 M 0 47 V 0 4488 R 0 -47
V 3240 0 M 0 94 V 0 4441 R 0 -94 V stroke LTb LCb setrgbcolor 3467
0 M 0 47 V 0 4488 R 0 -47 V 3600 0 M 0 47 V 0 4488 R 0 -47 V 3695 0
M 0 47 V 0 4488 R 0 -47 V 3768 0 M 0 47 V 0 4488 R 0 -47 V 3828 0 M
0 47 V 0 4488 R 0 -47 V 3878 0 M 0 47 V 0 4488 R 0 -47 V 3922 0 M 0
47 V 0 4488 R 0 -47 V 3961 0 M 0 47 V 0 4488 R 0 -47 V 3995 0 M 0 94
V 0 4441 R 0 -94 V stroke LTb LCb setrgbcolor 4223 0 M 0 47 V 0 4488
R 0 -47 V 4356 0 M 0 47 V 0 4488 R 0 -47 V 4450 0 M 0 47 V 0 4488 R
0 -47 V 4524 0 M 0 47 V 0 4488 R 0 -47 V 4583 0 M 0 47 V 0 4488 R 0
-47 V 4634 0 M 0 47 V 0 4488 R 0 -47 V 4678 0 M 0 47 V 0 4488 R 0 -47
V 4717 0 M 0 47 V 0 4488 R 0 -47 V 4751 0 M 0 94 V 0 4441 R 0 -94 V
stroke LTb LCb setrgbcolor 4979 0 M 0 47 V 0 4488 R 0 -47 V 5112 0
M 0 47 V 0 4488 R 0 -47 V 5206 0 M 0 47 V 0 4488 R 0 -47 V 5279 0 M
0 47 V 0 4488 R 0 -47 V 5339 0 M 0 47 V 0 4488 R 0 -47 V 5390 0 M 0
47 V 0 4488 R 0 -47 V 5434 0 M 0 47 V 0 4488 R 0 -47 V 5472 0 M 0 47
V 0 4488 R 0 -47 V 5507 0 M 0 94 V 0 4441 R 0 -94 V stroke LTb LCb
setrgbcolor 1.000 UL LTb LCb setrgbcolor 972 4535 N 972 0 L 5507 0
L 0 4535 V -4535 0 V Z stroke 1.000 UP 1.000 UL LTb LCb setrgbcolor
LCb setrgbcolor LTb LCb setrgbcolor LTb 1.000 UL LTb 0.88 0.09 0.13
C gsave 1728 4535 N 484 0 V 4 -6 V 31 -46 V 31 -45 V 30 -46 V 31 -46
V 30 -46 V 31 -46 V 30 -45 V 31 -46 V 30 -46 V 31 -46 V 30 -46 V 31
-46 V 30 -45 V 31 -46 V 31 -46 V 30 -46 V 31 -46 V 30 -45 V 31 -46
V 30 -46 V 31 -46 V 30 -46 V 31 -45 V 30 -46 V 31 -46 V 30 -46 V 31
-46 V 31 -45 V 30 -46 V 31 -46 V 30 -46 V 31 -46 V 30 -45 V 31 -46
V 30 -46 V 31 -46 V 30 -46 V 31 -45 V 30 -46 V 31 -46 V 31 -46 V 30
-46 V 31 -45 V 30 -46 V 31 -46 V 30 -46 V 31 -45 V 30 -46 V 31 -45
V 30 -45 V 31 -45 V 30 -45 V 31 -45 V 31 -44 V 30 -44 V 31 -43 V 30
-42 V 31 -41 V 30 -41 V 31 -39 V 30 -38 V 31 -37 V 30 -40 V 31 -64
V 30 -234 V 31 -328 V 31 706 V 30 302 V 31 211 V 30 175 V 31 157 V
30 152 V 31 151 V 30 153 V 31 159 V 30 169 V 31 185 V 30 185 V 31 230
V 31 210 V 30 307 V 1 12 V 60 0 V 0 0 V -3023 0 V 0.60 PolyFill 1.000
UL LTb 0.90 0.44 0.09 C gsave 972 4535 N 349 0 V 45 -80 V 98 -129 V
197 -160 V 99 -87 V 98 -162 V 99 -140 V 98 -119 V 99 -113 V 98 -111
V 99 -141 V 98 -126 V 99 -143 V 98 -184 V 98 43 V 99 -152 V 98 -191
V 99 -144 V 98 -206 V 99 -362 V 3 -4 V 95 -154 V 72 -161 V 27 -66 V
98 -269 V 43 1213 V 56 344 V 112 250 V 85 115 V 83 104 V 19 24 V 103
138 V 340 735 V 151 434 V 0 4 V -3552 0 V 0.60 PolyFill 1.000 UL LTb
0.05 0.55 0.52 C gsave 972 4535 N 454 0 V 4 -6 V 115 -251 V 38 -111
V 38 -135 V 38 -133 V 38 -148 V 38 -156 V 39 -158 V 38 -94 V 38 -89
V 38 -82 V 38 -78 V 39 -75 V 38 -74 V 38 -71 V 38 -70 V 38 -69 V 38
-69 V 39 -69 V 38 -68 V 38 -68 V 38 -68 V 38 -69 V 38 -68 V 39 -71
V 38 -71 V 38 -73 V 38 -73 V 38 -74 V 38 -75 V 39 -74 V 38 -68 V 38
-55 V 38 -26 V 38 39 V 38 1074 V 39 325 V 38 122 V 38 79 V 38 60 V
38 50 V 39 45 V 38 43 V 38 41 V 38 42 V 38 42 V 38 45 V 39 48 V 38
51 V 38 55 V 38 59 V 38 65 V 38 71 V 39 77 V 38 84 V 38 93 V 38 101
V 38 112 V 36 116 V 613 0 V 0 0 V -3359 0 V 0.60 PolyFill 1.000 UL
LTb 1.00 0.00 0.00 C gsave 2939 4535 N 0 0 V 0 -119 V 0.60 PolyFill
gsave 2939 4416 N 0 119 V -1 0 V 0 -298 V 0.60 PolyFill gsave 2938
4237 N 0 298 V -2 0 V 0 -477 V 0.60 PolyFill gsave 2936 4058 N 0 477
V -11 0 V 0 -656 V 0.60 PolyFill gsave 2925 3879 N 0 656 V -50 0 V
0 -835 V 0.60 PolyFill gsave 2875 3700 N 0 835 V -52 0 V 0 -922 V 0.60
PolyFill gsave 2823 3613 N 0 922 V -15 0 V 0 -1014 V 0.60 PolyFill
gsave 2808 3521 N 0 1014 V -99 0 V 0 -1193 V 0.60 PolyFill gsave 2709
3342 N 0 1193 V -1 0 V 0 -1195 V 0.60 PolyFill gsave 2708 3340 N 0
1195 V -116 0 V 0 -1210 V 0.60 PolyFill gsave 2592 3325 N 0 1210 V
-115 0 V 0 -1356 V 0.60 PolyFill gsave 2477 3179 N 0 1356 V -116 0
V 0 -1341 V 0.60 PolyFill gsave 2361 3194 N 0 1341 V -115 0 V 0 -1224
V 0.60 PolyFill gsave 2246 3311 N 0 1224 V -73 0 V 0 -1193 V 0.60 PolyFill
gsave 2173 3342 N 0 1193 V -43 0 V 0 -1187 V 0.60 PolyFill gsave 2130
3348 N 0 1187 V -115 0 V 0 -1052 V 0.60 PolyFill gsave 2015 3483 N
0 1052 V -74 0 V 0 -1014 V 0.60 PolyFill gsave 1941 3521 N 0 1014 V
-42 0 V 0 -1007 V 0.60 PolyFill gsave 1899 3528 N 0 1007 V -115 0 V
0 -951 V 0.60 PolyFill gsave 1784 3584 N 0 951 V -65 0 V 0 -835 V 0.60
PolyFill gsave 1719 3700 N 0 835 V -51 0 V 0 -688 V 0.60 PolyFill gsave
1668 3847 N 0 688 V -17 0 V 0 -656 V 0.60 PolyFill gsave 1651 3879
N 0 656 V -82 0 V 0 -477 V 0.60 PolyFill gsave 1569 4058 N 0 477 V
-16 0 V 0 -403 V 0.60 PolyFill gsave 1553 4132 N 0 403 V -69 0 V 0
-298 V 0.60 PolyFill gsave 1484 4237 N 0 298 V -47 0 V 0 -232 V 0.60
PolyFill gsave 1437 4303 N 0 232 V -71 0 V 0 -119 V 0.60 PolyFill gsave
1366 4416 N 0 119 V -44 0 V 0 -45 V 0.60 PolyFill gsave 1292 4535 N
30 -45 V 0 45 V 0.60 PolyFill 1.000 UL LTb 1.00 0.00 0.00 C 0.500 UL
LTb LT2 0.31 0.31 0.31 C 1443 4535 M 102 -147 V 38 -57 V 38 -74 V 38
-42 V 38 -49 V 38 -62 V 39 -66 V 38 -50 V 38 -50 V 38 -60 V 38 -57
V 39 -58 V 38 -44 V 38 -56 V 38 -59 V 38 -45 V 38 -51 V 39 -58 V 38
-49 V 38 -47 V 38 -46 V 38 -47 V 38 -45 V 39 -39 V 38 -38 V 38 -30
V 38 -27 V 38 -16 V 38 -7 V 39 8 V 38 31 V 38 67 V 38 127 V 38 232
V 38 248 V 39 57 V 38 31 V 38 23 V 38 20 V 38 19 V 39 20 V 38 20 V
38 23 V 38 24 V 38 28 V 38 31 V 39 34 V 38 39 V 38 44 V 38 49 V 38
55 V 38 62 V 39 68 V 38 76 V 18 40 V stroke LTb 0.31 0.31 0.31 C 1544
4535 M 1 -5 V 38 -187 V 38 -184 V 38 -180 V 38 -178 V 38 -173 V 39
-169 V 38 -97 V 38 -92 V 38 -84 V 38 -79 V 39 -76 V 38 -75 V 38 -72
V 38 -70 V 38 -70 V 38 -70 V 39 -69 V 38 -68 V 38 -69 V 38 -69 V 38
-70 V 38 -68 V 39 -72 V 38 -71 V 38 -73 V 38 -74 V 38 -75 V 38 -76
V 39 -73 V 38 -69 V 38 -56 V 38 -25 V 38 38 V 38 1077 V 39 332 V 38
127 V 38 82 V 38 64 V 38 53 V 39 48 V 38 45 V 38 44 V 38 44 V 38 45
V 38 48 V 39 50 V 38 53 V 38 57 V 38 62 V 38 67 V 38 73 V 39 79 V 38
87 V 38 95 V 38 103 V 38 114 V 16 51 V stroke LTb LT2 0.31 0.31 0.31
C 1946 4535 M 19 -28 V 38 -57 V 38 -49 V 38 -68 V 38 -51 V 38 -58 V
39 -55 V 38 -44 V 38 -60 V 38 -61 V 38 -53 V 38 -69 V 39 -57 V 38 -51
V 38 -57 V 8 -8 V 22 -37 V 23 -41 V 23 -30 V 23 -32 V 23 -32 V 23 -39
V 23 -30 V 23 -29 V 23 -38 V 23 -30 V 23 -40 V 22 -23 V 23 -35 V 23
-36 V 23 -31 V 23 -35 V 23 -19 V 23 -45 V 23 -32 V 23 -33 V 23 -31
V 22 -33 V 23 -29 V 23 -29 V 23 -26 V 23 -40 V 23 -20 V 46 -52 V 23
-26 V 23 -19 V 45 -38 V 23 -16 V 23 -12 V 46 -18 V 23 -3 V 23 5 V 23
11 V 23 21 V 23 35 V 22 54 V 23 91 V 23 162 V 23 281 V 23 89 V 23 42
V 23 30 V 23 23 V 23 20 V 23 17 V 22 16 V 23 16 V 23 15 V 23 14 V 23
15 V 16 11 V 102 78 V 103 101 V 102 135 V 103 181 V 103 241 V 58 181
V stroke LTb 0.31 0.31 0.31 C 1324 4535 M 42 -75 V 98 -130 V 197 -155
V 99 -84 V 98 -163 V 99 -140 V 98 -117 V 99 -111 V 98 -110 V 99 -140
V 98 -124 V 99 -142 V 98 -188 V 98 65 V 99 -154 V 98 -198 V 99 -145
V 98 -216 V 99 -375 V 3 -4 V 95 -155 V 72 -164 V 27 -66 V 98 -271 V
43 1218 V 56 351 V 112 262 V 85 122 V 83 111 V 19 25 V 103 145 V 340
754 V 138 374 V stroke LTb 0.31 0.31 0.31 C 3277 4535 M 8 -26 V 31
-91 V 30 -90 V 31 -91 V 30 -90 V 31 -89 V 31 -90 V 30 -88 V 31 -89
V 30 -87 V 31 -87 V 30 -85 V 31 -85 V 30 -83 V 31 -81 V 30 -80 V 31
-78 V 30 -77 V 31 -76 V 31 -74 V 30 -74 V 31 -74 V 30 -75 V 31 -77
V 30 -81 V 31 -87 V 30 -97 V 31 -115 V 30 -146 V 31 -213 V 30 -409
V 31 -373 V 31 729 V 30 322 V 31 227 V 30 189 V 31 170 V 30 163 V 31
162 V 30 163 V 31 168 V 30 178 V 31 201 V 30 191 V 31 271 V 31 213
V 7 111 V stroke LTb LT2 0.31 0.31 0.31 C 2213 4535 M 3 -6 V 31 -46
V 31 -45 V 30 -46 V 31 -46 V 30 -46 V 31 -46 V 30 -45 V 31 -46 V 30
-46 V 31 -46 V 30 -46 V 31 -46 V 30 -45 V 31 -46 V 31 -46 V 30 -46
V 31 -46 V 30 -45 V 31 -46 V 30 -46 V 31 -46 V 30 -46 V 31 -45 V 30
-46 V 31 -46 V 30 -46 V 31 -46 V 31 -45 V 30 -46 V 31 -46 V 30 -46
V 31 -45 V 30 -46 V 31 -46 V 30 -46 V 31 -45 V 30 -46 V 31 -46 V 30
-45 V 31 -46 V 31 -46 V 30 -45 V 31 -46 V 30 -45 V 31 -46 V 30 -45
V 31 -45 V 30 -45 V 31 -45 V 30 -44 V 31 -45 V 30 -44 V 31 -43 V 31
-44 V 30 -42 V 31 -42 V 30 -41 V 31 -39 V 30 -38 V 31 -35 V 30 -32
V 31 -26 V 30 -17 V 31 0 V 30 52 V 31 177 V 31 333 V 30 183 V 31 146
V 30 133 V 31 128 V 30 128 V 31 132 V 30 138 V 31 145 V 30 155 V 31
166 V 30 179 V 31 193 V 31 209 V 24 180 V stroke 2.000 UL LTb LCb setrgbcolor
1.000 UL LTb LCb setrgbcolor 972 4535 N 972 0 L 5507 0 L 0 4535 V -4535
0 V Z stroke 1.000 UP 1.000 UL LTb LCb setrgbcolor 1.000 UL LTb LCb
setrgbcolor 972 0 M 94 0 V 5507 0 M -94 0 V stroke LTb LCb setrgbcolor
972 341 M 47 0 V 4488 0 R -47 0 V 972 541 M 47 0 V 4488 0 R -47 0 V
972 683 M 47 0 V 4488 0 R -47 0 V 972 792 M 47 0 V 4488 0 R -47 0 V
972 882 M 47 0 V 4488 0 R -47 0 V 972 958 M 47 0 V 4488 0 R -47 0 V
972 1024 M 47 0 V 4488 0 R -47 0 V 972 1082 M 47 0 V 4488 0 R -47 0
V 972 1134 M 94 0 V 4441 0 R -94 0 V stroke LTb LCb setrgbcolor 972
1475 M 47 0 V 4488 0 R -47 0 V 972 1675 M 47 0 V 4488 0 R -47 0 V 972
1816 M 47 0 V 4488 0 R -47 0 V 972 1926 M 47 0 V 4488 0 R -47 0 V 972
2016 M 47 0 V 4488 0 R -47 0 V 972 2092 M 47 0 V 4488 0 R -47 0 V 972
2158 M 47 0 V 4488 0 R -47 0 V 972 2216 M 47 0 V 4488 0 R -47 0 V 972
2267 M 94 0 V 4441 0 R -94 0 V stroke LTb LCb setrgbcolor 972 2609
M 47 0 V 4488 0 R -47 0 V 972 2808 M 47 0 V 4488 0 R -47 0 V 972 2950
M 47 0 V 4488 0 R -47 0 V 972 3060 M 47 0 V 4488 0 R -47 0 V 972 3150
M 47 0 V 4488 0 R -47 0 V 972 3226 M 47 0 V 4488 0 R -47 0 V 972 3291
M 47 0 V 4488 0 R -47 0 V 972 3349 M 47 0 V 4488 0 R -47 0 V 972 3401
M 94 0 V 4441 0 R -94 0 V stroke LTb LCb setrgbcolor 972 3743 M 47
0 V 4488 0 R -47 0 V 972 3942 M 47 0 V 4488 0 R -47 0 V 972 4084 M
47 0 V 4488 0 R -47 0 V 972 4194 M 47 0 V 4488 0 R -47 0 V 972 4283
M 47 0 V 4488 0 R -47 0 V 972 4359 M 47 0 V 4488 0 R -47 0 V 972 4425
M 47 0 V 4488 0 R -47 0 V 972 4483 M 47 0 V 4488 0 R -47 0 V 972 4535
M 94 0 V 4441 0 R -94 0 V stroke LTb LCb setrgbcolor 972 0 M 0 94 V
0 4441 R 0 -94 V stroke LTb LCb setrgbcolor 1200 0 M 0 47 V 0 4488
R 0 -47 V 1333 0 M 0 47 V 0 4488 R 0 -47 V 1427 0 M 0 47 V 0 4488 R
0 -47 V 1500 0 M 0 47 V 0 4488 R 0 -47 V 1560 0 M 0 47 V 0 4488 R 0
-47 V 1611 0 M 0 47 V 0 4488 R 0 -47 V 1655 0 M 0 47 V 0 4488 R 0 -47
V 1693 0 M 0 47 V 0 4488 R 0 -47 V 1728 0 M 0 94 V 0 4441 R 0 -94 V
stroke LTb LCb setrgbcolor 1955 0 M 0 47 V 0 4488 R 0 -47 V 2088 0
M 0 47 V 0 4488 R 0 -47 V 2183 0 M 0 47 V 0 4488 R 0 -47 V 2256 0 M
0 47 V 0 4488 R 0 -47 V 2316 0 M 0 47 V 0 4488 R 0 -47 V 2367 0 M 0
47 V 0 4488 R 0 -47 V 2410 0 M 0 47 V 0 4488 R 0 -47 V 2449 0 M 0 47
V 0 4488 R 0 -47 V 2484 0 M 0 94 V 0 4441 R 0 -94 V stroke LTb LCb
setrgbcolor 2711 0 M 0 47 V 0 4488 R 0 -47 V 2844 0 M 0 47 V 0 4488
R 0 -47 V 2939 0 M 0 47 V 0 4488 R 0 -47 V 3012 0 M 0 47 V 0 4488 R
0 -47 V 3072 0 M 0 47 V 0 4488 R 0 -47 V 3122 0 M 0 47 V 0 4488 R 0
-47 V 3166 0 M 0 47 V 0 4488 R 0 -47 V 3205 0 M 0 47 V 0 4488 R 0 -47
V 3240 0 M 0 94 V 0 4441 R 0 -94 V stroke LTb LCb setrgbcolor 3467
0 M 0 47 V 0 4488 R 0 -47 V 3600 0 M 0 47 V 0 4488 R 0 -47 V 3695 0
M 0 47 V 0 4488 R 0 -47 V 3768 0 M 0 47 V 0 4488 R 0 -47 V 3828 0 M
0 47 V 0 4488 R 0 -47 V 3878 0 M 0 47 V 0 4488 R 0 -47 V 3922 0 M 0
47 V 0 4488 R 0 -47 V 3961 0 M 0 47 V 0 4488 R 0 -47 V 3995 0 M 0 94
V 0 4441 R 0 -94 V stroke LTb LCb setrgbcolor 4223 0 M 0 47 V 0 4488
R 0 -47 V 4356 0 M 0 47 V 0 4488 R 0 -47 V 4450 0 M 0 47 V 0 4488 R
0 -47 V 4524 0 M 0 47 V 0 4488 R 0 -47 V 4583 0 M 0 47 V 0 4488 R 0
-47 V 4634 0 M 0 47 V 0 4488 R 0 -47 V 4678 0 M 0 47 V 0 4488 R 0 -47
V 4717 0 M 0 47 V 0 4488 R 0 -47 V 4751 0 M 0 94 V 0 4441 R 0 -94 V
stroke LTb LCb setrgbcolor 4979 0 M 0 47 V 0 4488 R 0 -47 V 5112 0
M 0 47 V 0 4488 R 0 -47 V 5206 0 M 0 47 V 0 4488 R 0 -47 V 5279 0 M
0 47 V 0 4488 R 0 -47 V 5339 0 M 0 47 V 0 4488 R 0 -47 V 5390 0 M 0
47 V 0 4488 R 0 -47 V 5434 0 M 0 47 V 0 4488 R 0 -47 V 5472 0 M 0 47
V 0 4488 R 0 -47 V 5507 0 M 0 94 V 0 4441 R 0 -94 V stroke LTb LCb
setrgbcolor 1.000 UL LTb LCb setrgbcolor 972 4535 N 972 0 L 5507 0
L 0 4535 V -4535 0 V Z stroke 1.000 UP LCb setrgbcolor LCb setrgbcolor
LCb setrgbcolor 1.000 UL LTb LCb setrgbcolor LCb setrgbcolor LTb LCb
setrgbcolor LTb 2.000 UL LTb 0.00 0.00 0.70 C LCb setrgbcolor 2.000
UL LTb 0.00 0.00 0.70 C 2626 988 M 267 0 V 1808 1683 M -3 35 V -1 34
V -2 34 V -2 35 V -1 34 V -1 35 V -1 34 V 0 25 V -1 9 V -3 35 V -2
34 V -3 34 V -2 35 V -1 34 V -2 34 V -1 35 V -1 34 V -1 34 V -1 35
V 0 34 V -1 35 V -1 34 V 0 34 V -1 35 V 0 34 V 0 34 V 0 35 V -1 34
V 0 34 V 0 35 V 0 34 V 0 34 V -1 35 V 0 34 V 0 35 V 0 34 V 0 34 V 0
35 V 0 34 V 0 34 V 0 35 V 0 34 V 0 34 V 0 35 V 0 34 V 0 34 V 0 35 V
0 34 V 0 35 V 0 34 V 0 34 V 0 35 V 0 34 V 0 34 V 0 35 V 0 34 V 0 34
V 0 35 V 0 34 V 0 34 V 0 35 V 0 34 V 0 34 V 0 35 V 0 34 V 0 35 V 0
34 V 0 34 V 0 35 V 0 34 V 0 34 V 0 35 V 0 34 V 0 34 V 0 35 V 0 34 V
0 34 V 0 35 V 0 34 V 0 35 V 0 34 V 0 34 V 0 35 V 0 34 V 2445 1890 M
-7 9 V -11 25 V -12 31 V -1 3 V -9 35 V -8 34 V -5 22 V -3 12 V -7
35 V -6 34 V -5 34 V -2 10 V -2 -10 V -8 -34 V -10 -34 V -3 -10 V -1
10 V stroke 2345 2096 M -3 34 V -4 34 V -2 35 V -3 34 V -2 34 V -2
35 V -1 34 V -2 35 V -1 34 V -1 34 V -1 22 V -23 6 V -22 -16 V -11
-12 V -12 -13 V -11 -21 V -12 -20 V -5 -14 V -14 -35 V -4 -9 V -8 -25
V -12 -35 V -3 -7 V -6 -27 V -9 -34 V -8 -27 V -1 -8 V -6 -34 V -8
-34 V -8 -34 V 0 -1 V -6 -34 V -6 -34 V -8 -35 V -3 -13 V -4 -21 V
-6 -34 V -9 -35 V -4 -16 V -3 -18 V -7 -35 V -8 -34 V -5 -17 V -3 -17
V -7 -35 V -8 -34 V -5 -18 V -3 -16 V -7 -35 V -8 -34 V -4 -17 V -4
-17 V -7 -35 V -9 -34 V -3 -13 V -6 -21 V -10 -35 V -7 -20 V -6 -14
V -17 -34 V 0 -2 V -22 -33 V -1 -1 V -23 -6 V -5 7 V -18 23 V -4 12
V -14 34 V -5 12 V -6 22 V -10 35 V -7 26 V -2 8 V -7 34 V -7 35 V
-6 34 V -1 2 V -3 32 V -3 35 V -3 34 V -2 34 V 3240 3075 M -16 -17
V -7 -9 V -22 -26 V -1 -1 V -12 -33 V -11 -25 V -3 -9 V -13 -35 V -7
-16 V -6 -18 V -14 -34 V -3 -8 V -1 8 V -3 34 V -3 34 V -3 35 V -2
34 V -3 34 V -1 35 V -2 34 V -1 34 V -2 35 V stroke 3104 3161 M -1
34 V -1 34 V 0 16 V -8 -16 V -15 -28 V -3 -6 V -18 -34 V -2 -3 V -16
-32 V -7 -11 V -11 -23 V -12 -21 V -6 -13 V -16 -30 V -3 -5 V -20 -32
V -1 -2 V -22 -32 V -2 -2 V -21 -32 V -2 -3 V -21 -26 V -6 -8 V -17
-22 V -10 -12 V -13 -17 V -23 -17 V -2 -1 V -21 -9 V -23 1 V -14 8
V -8 4 V -23 15 V -21 16 V -2 1 V -23 5 V -7 -6 V -16 -16 V -4 -19
V -7 -34 V -9 -35 V -3 -12 V -2 -22 V -4 -34 V -5 -35 V -5 -34 V -7
-34 V 0 -1 V -3 -34 V -5 -34 V -5 -34 V -5 -35 V -5 -24 V -1 -10 V
-3 -34 V -5 -35 V -5 -34 V -6 -35 V -3 -16 V -2 -18 V -3 -34 V -5 -35
V -5 -34 V -6 -34 V -2 -9 V -4 -26 V -6 -34 V -7 -34 V -6 -25 V -2
-10 V -11 -34 V -9 -26 V -7 -8 V -16 -20 V -23 -1 V -16 21 V stroke
5.000 UL LTb LT1 0.00 0.00 0.00 C LCb setrgbcolor 5.000 UL LTb LT1
0.00 0.00 0.00 C 2626 788 M 267 0 V 347 894 R 86 -36 V 68 52 V 56 41
V 48 41 V 42 30 V 37 70 V 34 95 V 30 24 V 28 37 V 26 64 V 23 14 V 22
30 V 21 -218 V 20 -36 V 18 10 V 18 47 V 16 54 V 16 47 V 15 59 V 14
70 V 14 76 V 13 82 V 13 86 V 12 61 V 12 44 V 11 42 V 11 41 V 11 40
V 10 41 V 10 44 V 10 10 V 9 6 V 10 5 V 9 2 V 8 0 V 9 -1 V 8 -1 V 8
0 V 8 1 V 7 5 V 8 10 V 7 15 V 7 21 V 7 28 V 7 35 V 7 44 V 7 38 V 6
15 V 6 15 V 7 17 V 6 17 V 6 17 V 6 19 V 5 19 V 6 20 V 6 21 V 5 26 V
5 27 V 6 29 V 5 30 V 5 33 V 5 34 V 5 37 V 5 23 V 5 17 V 5 17 V 4 16
V 5 16 V 5 16 V 4 15 V 5 15 V 4 14 V 4 14 V 5 14 V 4 14 V 4 14 V 4
14 V 4 15 V 4 14 V 4 14 V 4 14 V 4 15 V 4 14 V 3 15 V 4 16 V 4 15 V
4 16 V 3 16 V 4 17 V 3 17 V 4 19 V 3 19 V 4 20 V 3 21 V 3 23 V 4 25
V 3 21 V 3 8 V 4 8 V 3 9 V 3 9 V 3 9 V stroke 4373 3936 M 3 9 V 3 9
V 3 9 V 3 9 V 3 10 V 3 9 V 3 10 V 3 10 V 3 11 V 3 -405 V 3 5 V 2 7
V 3 6 V 3 7 V 3 7 V 2 7 V 3 8 V 3 8 V 2 9 V 3 9 V 3 10 V 2 11 V 3 11
V 2 12 V 3 12 V 2 13 V stroke LTb LT4 0.70 0.00 0.35 C LCb setrgbcolor
5.000 UL LTb LT4 0.70 0.00 0.35 C 2626 588 M 267 0 V 4452 3931 M 130
-67 V 98 223 V 73 321 V 43 127 V stroke LTb LT3 0.00 0.50 1.00 C LCb
setrgbcolor 5.000 UL LTb LT3 0.00 0.50 1.00 C 2626 388 M 267 0 V 4737
4535 M 2 -19 V 65 -459 V 65 -458 V 64 -465 V 65 -470 V 64 -469 V 65
-467 V 64 -468 V 65 -468 V 64 -464 V 5366 0 L stroke 1.000 UL LTb LT3
0.00 0.50 1.00 C 4654 4535 M 21 -145 V 64 -441 V 65 -458 V 65 -459
V 64 -465 V 65 -470 V 64 -468 V 65 -468 V 64 -468 V 65 -468 V 5287
0 L stroke 5.000 UL LTb LT2 1.00 0.50 0.00 C LCb setrgbcolor 5.000
UL LTb LT2 1.00 0.50 0.00 C 2626 188 M 267 0 V 4697 4535 M 1 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0
-3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V
0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3
V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V
0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -4 V 1 -3 V
0 -3 V 1 -3 V 0 -3 V 1 -3 V stroke 4744 4223 M 0 -3 V 1 -3 V 0 -3 V
0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3
V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -4 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V
0 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V stroke 4791 3905 M 0 -3 V 1 -3 V 0 -3
V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V
0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3
V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-4 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V stroke 4838 3586 M 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-4 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V
0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3
V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V
0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 0 -3 V 1 -3 V
0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V stroke 4885 3268 M 1 -3 V 0 -3 V
1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -4 V 1 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V
0 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V stroke 4932 2950 M 1 -3 V 0 -3
V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 0 -3 V 1 -3 V
0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3
V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V stroke 4980 2631 M 0 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V
0 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 1
-3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V
0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V
0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -4 V 0 -3
V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V stroke 5027 2313 M 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V
0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -4 V stroke 5074 1994 M 0 -3
V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 0 -3 V 1 -3 V
0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3
V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V
1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V stroke 5121 1676 M 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V
0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V
0 -3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V
0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 0 -3
V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V stroke 5168 1358 M
1 -3 V 0 -3 V 1 -3 V 0 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V
0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V
0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -4 V 1 -3 V 0 -3 V stroke 5215 1039
M 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -4 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V stroke 5263 721
M 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V stroke 5310 403
M 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -4 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0
-3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V
1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -4 V 1
-3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V
0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -4 V 1 -3 V 0 -3 V 1 -3 V 0 -3
V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1
-3 V 0 -3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V 1 -3 V stroke 5357 84
M 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0
-3 V 1 -4 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -3 V
1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 1 -3 V 0 -3 V 0 -2 V stroke
2.000 UL LTb LCb setrgbcolor 1.000 UL LTb LCb setrgbcolor 972 4535
N 972 0 L 5507 0 L 0 4535 V -4535 0 V Z stroke 1.000 UP 1.000 UL LTb
LCb setrgbcolor stroke grestore end showpage
 
@endspecial 849 2316
a Fg(CMB)735 2232 y(di\013use)29 b Ff(\015)751 2149 y
Fg(XMASS)612 2066 y(XENON100)653 1982 y(XENON10)1179
2603 y Fe(m)1259 2617 y Fd(V)1340 2603 y Fc(\(eV)r(\))38
1427 y
 gsave currentpoint currentpoint translate 630 rotate neg exch neg
exch translate
 38 1427 a -286 1450 a Fc(kinetic)j(mixing)e Fe(\024)38
1427 y
 currentpoint grestore moveto
 38 1427 a 1634 1500 a Fc(R)m(G)1310 1344 y(HB)902
1202 y(sun)2229 2493 y(10)2319 2460 y Fb(6)1914 2493
y Fc(10)2004 2460 y Fb(5)1599 2493 y Fc(10)1689 2460
y Fb(4)1285 2493 y Fc(10)1375 2460 y Fb(3)970 2493 y
Fc(10)1060 2460 y Fb(2)655 2493 y Fc(10)745 2460 y Fb(1)382
2484 y Fc(1)170 520 y(10)260 487 y Fa(\000)p Fb(12)170
992 y Fc(10)260 959 y Fa(\000)p Fb(13)170 1465 y Fc(10)260
1432 y Fa(\000)p Fb(14)170 1937 y Fc(10)260 1904 y Fa(\000)p
Fb(15)170 2409 y Fc(10)260 2376 y Fa(\000)p Fb(16)1179
2603 y Fe(m)1259 2617 y Fd(V)1340 2603 y Fc(\(eV)r(\))38
1427 y
 gsave currentpoint currentpoint translate 630 rotate neg exch neg
exch translate
 38 1427 a -286 1450 a Fc(kinetic)i(mixing)e Fe(\024)38
1427 y
 currentpoint grestore moveto
 38 1427 a 2229 2493 a Fc(10)2319 2460 y Fb(6)1914
2493 y Fc(10)2004 2460 y Fb(5)1599 2493 y Fc(10)1689
2460 y Fb(4)1285 2493 y Fc(10)1375 2460 y Fb(3)970 2493
y Fc(10)1060 2460 y Fb(2)655 2493 y Fc(10)745 2460 y
Fb(1)382 2484 y Fc(1)170 520 y(10)260 487 y Fa(\000)p
Fb(12)170 992 y Fc(10)260 959 y Fa(\000)p Fb(13)170 1465
y Fc(10)260 1432 y Fa(\000)p Fb(14)170 1937 y Fc(10)260
1904 y Fa(\000)p Fb(15)170 2409 y Fc(10)260 2376 y Fa(\000)p
Fb(16)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
